{"version":3,"sources":["webpack:///../../../../src/rendering/renderers/gl/GlEncoderSystem.ts","webpack:///../../../../../../src/rendering/renderers/gl/texture/uploaders/glUploadVideoResource.ts","webpack:///../../../../../src/rendering/renderers/gl/renderTarget/GlRenderTargetSystem.ts","webpack:///../../../../../../src/rendering/renderers/gl/shader/program/defaultValue.ts","webpack:///../../../../src/rendering/renderers/gl/WebGLRenderer.ts","webpack:///../../../../../../src/rendering/renderers/gl/shader/utils/generateUniformsSync.ts","webpack:///../../../../../../src/rendering/renderers/gl/shader/utils/generateUniformsSyncTypes.ts","webpack:///../../../../../src/rendering/renderers/gl/shader/GenerateShaderSyncCode.ts","webpack:///../../../../../../src/rendering/renderers/gl/shader/utils/createUboElementsSTD40.ts","webpack:///../../../../src/rendering/renderers/gl/GlUboSystem.ts","webpack:///../../../../../src/rendering/renderers/gl/texture/GlTextureSystem.ts","webpack:///../../../../../../src/rendering/renderers/gl/shader/utils/createUboSyncSTD40.ts","webpack:///../../../../../src/rendering/renderers/gl/renderTarget/GlRenderTargetAdaptor.ts","webpack:///../../../../src/rendering/batcher/gl/GlBatchAdaptor.ts","webpack:///../../../../../src/rendering/renderers/gl/geometry/GlGeometrySystem.ts","webpack:///../../../../../../src/rendering/renderers/gl/shader/utils/generateArraySyncSTD40.ts","webpack:///../../../../../../src/rendering/renderers/gl/shader/program/logProgramError.ts","webpack:///../../../../../../src/rendering/renderers/gl/texture/utils/mapFormatToGlFormat.ts","webpack:///../../../../../../src/rendering/renderers/gl/texture/utils/mapFormatToGlType.ts","webpack:///../../../../../../src/rendering/renderers/gl/geometry/utils/getGlTypeFromFormat.ts","webpack:///../../../../../../src/rendering/renderers/gl/shader/program/compileShader.ts","webpack:///../../../../../../src/rendering/renderers/gl/shader/program/getUboData.ts","webpack:///../../../../../src/rendering/renderers/gl/buffer/GlBuffer.ts","webpack:///../../../../../../src/rendering/renderers/gl/texture/utils/pixiToGlMaps.ts","webpack:///../../../../../src/rendering/renderers/gl/buffer/const.ts","webpack:///../../../../../src/rendering/renderers/gl/shader/GlShaderSystem.ts","webpack:///../../../../../src/rendering/renderers/gl/buffer/GlBufferSystem.ts","webpack:///../../../../../../src/rendering/renderers/gl/texture/uploaders/glUploadCompressedTextureResource.ts","webpack:///../../../../src/rendering/renderers/gl/GlBackBufferSystem.ts","webpack:///../../../../../src/rendering/renderers/gl/shader/GlProgramData.ts","webpack:///../../../../src/scene/mesh/gl/GlMeshAdaptor.ts","webpack:///../../../../src/scene/graphics/gl/GlGraphicsAdaptor.ts","webpack:///../../../../src/rendering/renderers/gl/GlRenderTarget.ts","webpack:///../../../../src/rendering/renderers/gl/GlColorMaskSystem.ts","webpack:///../../../../../src/rendering/renderers/gl/shader/GlUniformGroupSystem.ts","webpack:///../../../../../../src/rendering/renderers/gl/shader/program/generateProgram.ts","webpack:///../../../../../../src/rendering/renderers/gl/texture/uploaders/glUploadBufferImageResource.ts","webpack:///../../../../../../src/rendering/renderers/gl/shader/program/extractAttributesFromGlProgram.ts","webpack:///../../../../../../src/rendering/renderers/gl/shader/program/mapType.ts","webpack:///../../../../src/rendering/renderers/gl/GlStencilSystem.ts","webpack:///../../../../../../src/rendering/renderers/gl/texture/utils/applyStyleParams.ts","webpack:///../../../../../src/rendering/renderers/gl/texture/GlTexture.ts","webpack:///../../../../../../src/rendering/renderers/gl/texture/uploaders/glUploadImageResource.ts","webpack:///../../../../../src/rendering/renderers/gl/state/mapWebGLBlendModesToPixi.ts","webpack:///../../../../../src/rendering/renderers/gl/state/GlStateSystem.ts","webpack:///../../../../../../src/rendering/renderers/gl/shader/program/getUniformData.ts","webpack:///../../../../../../src/rendering/renderers/gl/texture/utils/mapFormatToGlInternalFormat.ts","webpack:///../../../../../src/rendering/renderers/gl/shader/batchSamplersUniformGroup.ts","webpack:///../../../../../src/rendering/renderers/gl/texture/const.ts","webpack:///../../../../../src/rendering/renderers/gl/context/GlContextSystem.ts"],"names":["GlEncoderSystem","constructor","renderer","commandFinished","Promise","resolve","this","_renderer","setGeometry","geometry","shader","bind","glProgram","finishRenderPass","draw","options","state","skipSync","topology","type","size","start","instanceCount","_activeProgram","set","destroy","extension","ExtensionType","WebGLSystem","name","glUploadVideoResource","id","upload","source","glTexture","gl","webGLVersion","isValid","glUploadImageResource","texImage2D","target","internalFormat","format","GlRenderTargetSystem","RenderTargetSystem","super","adaptor","GlRenderTargetAdaptor","init","booleanArray","array","Array","i","length","defaultValue","Float32Array","Int32Array","Uint32Array","DefaultWebGLSystems","SharedSystems","GlUboSystem","GlBackBufferSystem","GlContextSystem","GlBufferSystem","GlTextureSystem","GlGeometrySystem","GlUniformGroupSystem","GlShaderSystem","GlStateSystem","GlStencilSystem","GlColorMaskSystem","DefaultWebGLPipes","SharedRenderPipes","DefaultWebGLAdapters","GlBatchAdaptor","GlMeshAdaptor","GlGraphicsAdaptor","systems","renderPipes","renderPipeAdaptors","extensions","handleByNamedList","WebGLPipes","WebGLPipesAdaptor","add","WebGLRenderer","AbstractRenderer","systemConfig","RendererType","WEBGL","generateUniformsSync","group","uniformData","funcFragments","uniforms","UniformGroup","ubo","push","BufferResource","uniform","uniformStructures","parsed","j","uniformParsers","parser","test","templateType","UNIFORM_TO_SINGLE_SETTERS","UNIFORM_TO_ARRAY_SETTERS","template","replace","Function","join","f32","i32","u32","bool","generateShaderSyncCode","shaderSystem","headerFragments","addedTextreSystem","blockIndex","textureCount","programData","_getProgramData","groups","resources","resource","TextureSource","uniformName","_uniformBindMap","_gl","uniform1i","location","functionSource","WGSL_TO_STD40_SIZE","createUboElementsSTD40","uboElements","map","data","offset","chunkSize","uboElement","Error","Math","max","lineUpValue","ceil","UboSystem","createUboElements","generateUboSync","createUboSyncFunctionSTD40","BYTES_PER_PIXEL","managedTextures","_glTextures","Object","create","_glSamplers","_boundTextures","_activeTextureLocation","_boundSamplers","_uploads","image","buffer","glUploadBufferImageResource","video","compressed","glUploadCompressedTextureResource","_useSeparateSamplers","contextChange","_mapFormatToInternalFormat","mapFormatToGlInternalFormat","context","_mapFormatToType","mapFormatToGlType","_mapFormatToFormat","mapFormatToGlFormat","Texture","EMPTY","initSource","texture","arguments","undefined","bindSource","_bindSampler","style","_touched","textureGC","count","_activateLocation","getGlSource","bindTexture","bindSampler","sampler","_getGlSampler","unbind","boundTextures","activeTexture","TEXTURE0","_initSource","GlTexture","createTexture","autoGenerateMipmaps","supports","nonPowOf2mipmaps","isPowerOfTwo","biggestDimension","width","height","mipLevelCount","floor","log2","uid","includes","on","onSourceUpdate","onStyleChange","onSourceDestroy","onSourceUnload","onUpdateMipmaps","updateStyle","firstCreation","TEXTURE_2D","applyStyleParams","anisotropicFiltering","nonPowOf2wrapping","deleteTexture","uploadMethodId","RGBA","pixelWidth","pixelHeight","UNSIGNED_BYTE","generateMipmap","off","splice","indexOf","_initSampler","glSampler","createSampler","_resourceId","generateCanvas","pixels","getPixels","canvas","DOMAdapter","get","createCanvas","ctx","getContext","imageData","createImageData","putImageData","resolution","frame","round","Uint8Array","renderTarget","getRenderTarget","glRenterTarget","getGpuRenderTarget","bindFramebuffer","FRAMEBUFFER","resolveTargetFramebuffer","readPixels","x","y","Uint8ClampedArray","slice","forEach","createUboSyncFunction","generateArraySyncSTD40","uboSyncFunctionsSTD40","_clearColorCache","_viewPortCache","Rectangle","renderTargetSystem","_renderTargetSystem","runners","copyToTexture","sourceRenderSurfaceTexture","destinationTexture","originSrc","originDest","glRenderTarget","copyTexSubImage2D","startRenderPass","clear","clearColor","viewport","colorTexture","gpuRenderTarget","viewPortY","isRoot","colorTextures","framebuffer","viewPortCache","depthStencilRenderBuffer","stencil","depth","_initStencil","msaa","READ_FRAMEBUFFER","blitFramebuffer","COLOR_BUFFER_BIT","NEAREST","initGpuRenderTarget","GlRenderTarget","_initColor","destroyGpuRenderTarget","deleteFramebuffer","deleteRenderbuffer","msaaRenderBuffer","renderBuffer","_renderTarget","CLEAR","ALL","NONE","COLOR","_clearColor","defaultClearColor","clearColorCache","clearColorArray","resizeGpuRenderTarget","_resizeColor","_resizeStencil","createFramebuffer","antialias","warn","glSource","framebufferTexture2D","COLOR_ATTACHMENT0","viewFramebuffer","_","createRenderbuffer","resize","_resolution","source2","glInternalFormat","bindRenderbuffer","RENDERBUFFER","renderbufferStorageMultisample","framebufferRenderbuffer","DEPTH_STENCIL_ATTACHMENT","DEPTH24_STENCIL8","renderbufferStorage","DEPTH_STENCIL","_didUpload","_tempState","State","for2d","batcherPipe","compileHighShaderGlProgram","bits","colorBitGl","generateTextureBatchBitGl","MAX_TEXTURES","roundPixelsBitGl","_shader","Shader","batchSamplers","batchSamplersUniformGroup","batchPipe","updateUniformGroup","globalUniforms","uniformGroup","execute","batch","blendMode","textures","topologyToGlMap","_geometryVaoHash","_activeGeometry","_activeVao","hasVao","hasInstance","vertexArrayObject","nativeVaoExtension","createVertexArray","createVertexArrayOES","bindVertexArray","vao","bindVertexArrayOES","deleteVertexArray","deleteVertexArrayOES","nativeInstancedExtension","vertexAttribDivisorANGLE","drawArraysInstanced","a","b","c","d","drawArraysInstancedANGLE","drawElementsInstanced","e","drawElementsInstancedANGLE","vertexAttribDivisor","program","getVao","updateBuffers","reset","bufferSystem","buffers","updateBuffer","checkCompatibility","geometryAttributes","attributes","shaderAttributes","_attributeData","getSignature","attribs","strings","_this$_geometryVaoHas","_key","initGeometryVao","signature","onGeometryDestroy","vaoObjectHash","ensureAttributes","activateVao","contextLost","destroyAll","indexBuffer","lastBuffer","attribute","glBuffer","getGlBuffer","programAttrib","_programAttrib$format","enableVertexAttribArray","attributeInfo","getAttributeInfoFromFormat","getGlTypeFromFormat","substring","vertexAttribIPointer","stride","vertexAttribPointer","normalised","instance","glTopology","byteSize","BYTES_PER_ELEMENT","glType","UNSIGNED_SHORT","UNSIGNED_INT","drawElements","getSize","drawArrays","offsetToAdd","rowSize","elementSize","value","remainder","logPrettyShaderError","shaderSrc","getShaderSource","split","line","index","shaderLog","getShaderInfoLog","splitShader","dedupe","lineNumbers","parseFloat","filter","n","logArgs","number","fragmentSourceToLog","console","error","groupCollapsed","groupEnd","logProgramError","vertexShader","fragmentShader","getProgramParameter","LINK_STATUS","getShaderParameter","COMPILE_STATUS","getProgramInfoLog","r8unorm","RED","r8snorm","r8uint","r8sint","r16uint","r16sint","r16float","rg8unorm","RG","rg8snorm","rg8uint","rg8sint","r32uint","r32sint","r32float","rg16uint","rg16sint","rg16float","rgba8unorm","rgba8snorm","rgba8uint","rgba8sint","bgra8unorm","rgb9e5ufloat","RGB","rgb10a2unorm","rg11b10ufloat","rg32uint","rg32sint","rg32float","rgba16uint","rgba16sint","rgba16float","rgba32uint","rgba32sint","rgba32float","stencil8","STENCIL_INDEX8","depth16unorm","DEPTH_COMPONENT","depth24plus","depth32float","BYTE","SHORT","HALF_FLOAT","INT","FLOAT","UNSIGNED_INT_5_9_9_9_REV","UNSIGNED_INT_2_10_10_10_REV","UNSIGNED_INT_10F_11F_11F_REV","UNSIGNED_INT_24_8","FLOAT_32_UNSIGNED_INT_24_8_REV","infoMap","uint8x2","GL_TYPES","uint8x4","sint8x2","sint8x4","unorm8x2","unorm8x4","snorm8x2","snorm8x4","uint16x2","uint16x4","sint16x2","sint16x4","unorm16x2","unorm16x4","snorm16x2","snorm16x4","float16x2","float16x4","float32","float32x2","float32x3","float32x4","uint32","uint32x2","uint32x3","uint32x4","sint32","sint32x2","sint32x3","sint32x4","_infoMap$format","compileShader","src","createShader","shaderSource","getUboData","ACTIVE_UNIFORM_BLOCKS","uniformBlocks","totalUniformsBlocks","getActiveUniformBlockName","uniformBlockIndex","getUniformBlockIndex","getActiveUniformBlockParameter","UNIFORM_BLOCK_DATA_SIZE","GlBuffer","updateID","byteLength","scaleModeToGlFilter","linear","nearest","mipmapScaleModeToGlFilter","wrapModeToGlAddress","repeat","compareModeToGlCompare","never","less","equal","greater","always","BUFFER_TYPE","BUFFER_TYPE2","defaultSyncData","_programDataHash","_nextIndex","_boundUniformsIdsToIndexHash","_boundIndexToUniformsHash","_shaderSyncFunctions","_maxBindings","MAX_UNIFORM_BUFFER_BINDINGS","getParameter","_setProgram","syncFunction","_generateShaderSync","bindUniformBlock","isBufferResource","_bufferResource","boundIndex","nextIndex","currentBoundUniformGroup","bindBufferRange","bindBufferBase","_uniformBlockData","uniformBlockBindings","uniformBlockBinding","useProgram","_createProgramData","key","generateProgram","keys","_gpuBuffers","_boundBufferBases","createGLBuffer","bindBuffer","UNIFORM_BUFFER","_updateID","bufferSubData","_updateSize","drawType","descriptor","usage","BufferUsage","STATIC","STATIC_DRAW","DYNAMIC_DRAW","bufferData","deleteBuffer","onBufferDestroy","ARRAY_BUFFER","INDEX","ELEMENT_ARRAY_BUFFER","UNIFORM","createBuffer","compressedFormatMap","pixelStorei","UNPACK_ALIGNMENT","mipWidth","mipHeight","levelBuffer","compressedTexImage2D","bigTriangleGeometry","Geometry","aPosition","_GlBackBufferSystem","useBackBuffer","_useBackBufferThisRender","defaultOptions","_antialias","_state","bigTriangleProgram","GlProgram","vertex","fragment","_bigTriangleShader","uTexture","WHITE","renderStart","renderTarget2","_targetTexture","_getBackBufferTexture","renderEnd","_presentBackBuffer","_backBufferTexture","encoder","targetSourceTexture","priority","GlProgramData","uniformGroups","uniformDirtyGroups","localUniformBitGl","textureBitGl","textureUniforms","uTextureMatrix","Matrix","meshPipe","mesh","uSampler","textureMatrix","mapCoord","bindGroup","localUniformsBindGroup","_geometry","uColor","uTransformMatrix","uRound","localUniforms","graphicsPipe","renderable","customShader","contextSystem","graphicsContext","instructions","getContextRenderData","batches","instructionSize","_colorMaskCache","setMask","colorMask","_cache","_uniformGroupSyncHash","syncData","isStatic","_dirtyId","syncFunc","_getUniformSyncFunction","_this$_uniformGroupSy","_signature","_createUniformSyncFunction","uniformGroupSyncHash","_getSignature","_uniformData","_generateUniformsSync","preFix","glVertShader","VERTEX_SHADER","glFragShader","FRAGMENT_SHADER","webGLProgram","createProgram","attachShader","transformFeedbackVaryings","names","bufferMode","SEPARATE_ATTRIBS","INTERLEAVED_ATTRIBS","linkProgram","extractAttributesFromGlProgram","getUniformData","deleteShader","getUniformLocation","texSubImage2D","sortAttributes","totalAttributes","ACTIVE_ATTRIBUTES","attribData","getActiveAttrib","startsWith","mapGlToVertexFormat","sort","bindAttribLocation","getAttribLocation","GL_TABLE","GL_TO_GLSL_TYPES","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT_VEC2","INT_VEC3","INT_VEC4","UNSIGNED_INT_VEC2","UNSIGNED_INT_VEC3","UNSIGNED_INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","INT_SAMPLER_2D","UNSIGNED_INT_SAMPLER_2D","SAMPLER_CUBE","INT_SAMPLER_CUBE","UNSIGNED_INT_SAMPLER_CUBE","SAMPLER_2D_ARRAY","INT_SAMPLER_2D_ARRAY","UNSIGNED_INT_SAMPLER_2D_ARRAY","GLSL_TO_VERTEX_TYPES","float","vec2","vec3","vec4","int","ivec2","ivec3","ivec4","uint","uvec2","uvec3","uvec4","bvec2","bvec3","bvec4","mapType","typeNames","tn","typeValue","_stencilCache","enabled","stencilReference","stencilMode","STENCIL_MODES","_renderTargetStencilState","onRenderTargetChange","_comparisonFuncMapping","ALWAYS","NEVER","EQUAL","NOTEQUAL","LESS","LEQUAL","GREATER","GEQUAL","_stencilOpsMapping","keep","KEEP","zero","ZERO","REPLACE","invert","INVERT","INCR","DECR","INCR_WRAP","DECR_WRAP","_activeRenderTarget","stencilState","DISABLED","setStencilMode","mode","GpuStencilModesToPixi","enable","STENCIL_TEST","stencilFunc","stencilBack","compare","stencilOp","passOp","disable","mipmaps","anisotropicExt","glFunctionName","firstParam","forceClamp","castParam","addressModeU","addressModeV","addressModeW","wrapModeS","wrapModeT","wrapModeR","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_WRAP_R","magFilter","TEXTURE_MAG_FILTER","mipmapFilter","glFilterMode","minFilter","TEXTURE_MIN_FILTER","maxAnisotropy","level","min","MAX_TEXTURE_MAX_ANISOTROPY_EXT","TEXTURE_MAX_ANISOTROPY_EXT","TEXTURE_COMPARE_FUNC","GL_TARGETS","GL_FORMATS","samplerType","premultipliedAlpha","alphaMode","UNPACK_PREMULTIPLY_ALPHA_WEBGL","glWidth","glHeight","textureWidth","textureHeight","resourceWidth","resourceHeight","mapWebGLBlendModesToPixi","blendMap","normal","ONE","ONE_MINUS_SRC_ALPHA","multiply","DST_COLOR","screen","ONE_MINUS_SRC_COLOR","none","SRC_ALPHA","erase","BLEND","OFFSET","CULLING","DEPTH_TEST","WINDING","DEPTH_MASK","_GlStateSystem","stateId","polygonOffset","_blendEq","setBlend","setOffset","setCullFace","setDepthTest","setFrontFace","setDepthMask","checks","defaultState","blendModesMap","diff","call","forceState","_updateCheck","_checkBlendMode","_checkPolygonOffset","POLYGON_OFFSET_FILL","depthMask","CULL_FACE","frontFace","setBlendMode","blendFunc","blendFuncSeparate","blendEquationSeparate","FUNC_ADD","setPolygonOffset","scale","UNPACK_FLIP_Y_WEBGL","func","system","totalUniforms","ACTIVE_UNIFORMS","getActiveUniform","isArray","match","srgb","getWebGLRenderingContext","SRGB8_ALPHA8_EXT","SRGB8_ALPHA8","RGBA8","R8","R8_SNORM","R8UI","R8I","R16UI","R16I","R16F","RG8","RG8_SNORM","RG8UI","RG8I","R32UI","R32I","R32F","RG16UI","RG16I","RG16F","RGBA8_SNORM","RGBA8UI","RGBA8I","RGB9_E5","RGB10_A2","R11F_G11F_B10F","RG32UI","RG32I","RG32F","RGBA16UI","RGBA16I","RGBA16F","RGBA32UI","RGBA32I","RGBA32F","DEPTH_COMPONENT16","DEPTH_COMPONENT24","DEPTH_COMPONENT32F","DEPTH32F_STENCIL8","s3tc","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","s3tc_sRGB","COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT","rgtc","COMPRESSED_RED_RGTC1_EXT","COMPRESSED_SIGNED_RED_RGTC1_EXT","COMPRESSED_RED_GREEN_RGTC2_EXT","COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT","bptc","COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT","COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT","COMPRESSED_RGBA_BPTC_UNORM_EXT","COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT","etc","COMPRESSED_RGB8_ETC2","COMPRESSED_SRGB8_ETC2","COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2","COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2","COMPRESSED_RGBA8_ETC2_EAC","COMPRESSED_SRGB8_ALPHA8_ETC2_EAC","COMPRESSED_R11_EAC","COMPRESSED_SIGNED_RG11_EAC","astc","COMPRESSED_RGBA_ASTC_4x4_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR","COMPRESSED_RGBA_ASTC_5x4_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR","COMPRESSED_RGBA_ASTC_5x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR","COMPRESSED_RGBA_ASTC_6x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR","COMPRESSED_RGBA_ASTC_6x6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR","COMPRESSED_RGBA_ASTC_8x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR","COMPRESSED_RGBA_ASTC_8x6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR","COMPRESSED_RGBA_ASTC_8x8_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR","COMPRESSED_RGBA_ASTC_10x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR","COMPRESSED_RGBA_ASTC_10x6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR","COMPRESSED_RGBA_ASTC_10x8_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR","COMPRESSED_RGBA_ASTC_10x10_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR","COMPRESSED_RGBA_ASTC_12x10_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR","COMPRESSED_RGBA_ASTC_12x12_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR","sampleValues","uTextures","GL_FORMATS2","GL_TARGETS2","GL_TYPES2","_GlContextSystem","uint32Indices","uniformBufferObject","srgbTextures","handleContextLost","handleContextRestored","isContextLost","initFromContext","_options$premultiplie","_options$powerPrefere","alpha","background","backBuffer","createContext","preferWebGLVersion","preserveDrawingBuffer","powerPreference","getExtensions","validateContext","emit","element","view","addEventListener","common","getExtension","floatTextureLinear","etc1","pvrtc","atc","loseContext","drawBuffers","depthTexture","uint32ElementIndex","floatTexture","textureHalfFloat","textureHalfFloatLinear","colorBufferFloat","provokeExt","provokingVertexWEBGL","FIRST_VERTEX_CONVENTION_WEBGL","event","preventDefault","_contextLossForced","setTimeout","_this$extensions$lose","restoreContext","_this$extensions$lose2","removeEventListener","forceContextLoss","_this$extensions$lose3","getContextAttributes","isWebGl2"],"mappings":"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","file":"js/chunk-4f14e4ea.eb45cb5a.js","sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\n\nimport type { Topology } from '../shared/geometry/const';\nimport type { Geometry } from '../shared/geometry/Geometry';\nimport type { Shader } from '../shared/shader/Shader';\nimport type { State } from '../shared/state/State';\nimport type { System } from '../shared/system/System';\nimport type { WebGLRenderer } from './WebGLRenderer';\n\n/**\n * The system that handles encoding commands for the WebGL.\n * @memberof rendering\n */\nexport class GlEncoderSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'encoder',\n    } as const;\n\n    public readonly commandFinished = Promise.resolve();\n    private readonly _renderer: WebGLRenderer;\n\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public setGeometry(geometry: Geometry, shader?: Shader)\n    {\n        this._renderer.geometry.bind(geometry, shader.glProgram);\n    }\n\n    public finishRenderPass()\n    {\n        // noop\n    }\n\n    public draw(options: {\n        geometry: Geometry,\n        shader: Shader,\n        state?: State,\n        topology?: Topology,\n        size?: number,\n        start?: number,\n        instanceCount?: number\n        skipSync?: boolean,\n    })\n    {\n        const renderer = this._renderer;\n        const { geometry, shader, state, skipSync, topology: type, size, start, instanceCount } = options;\n\n        renderer.shader.bind(shader, skipSync);\n\n        renderer.geometry.bind(geometry, renderer.shader._activeProgram);\n\n        if (state)\n        {\n            renderer.state.set(state);\n        }\n\n        renderer.geometry.draw(type, size, start, instanceCount ?? geometry.instanceCount);\n    }\n\n    public destroy()\n    {\n        (this._renderer as null) = null;\n    }\n}\n","import { glUploadImageResource } from './glUploadImageResource';\n\nimport type { VideoSource } from '../../../shared/texture/sources/VideoSource';\nimport type { GlRenderingContext } from '../../context/GlRenderingContext';\nimport type { GlTexture } from '../GlTexture';\nimport type { GLTextureUploader } from './GLTextureUploader';\n\nexport const glUploadVideoResource = {\n\n    id: 'video',\n\n    upload(source: VideoSource, glTexture: GlTexture, gl: GlRenderingContext, webGLVersion: number)\n    {\n        if (!source.isValid)\n        {\n            gl.texImage2D(\n                glTexture.target,\n                0,\n                glTexture.internalFormat,\n                1,\n                1,\n                0,\n                glTexture.format,\n                glTexture.type,\n                null\n            );\n\n            return;\n        }\n\n        glUploadImageResource.upload(source, glTexture, gl, webGLVersion);\n    }\n} as GLTextureUploader;\n\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { RenderTargetSystem } from '../../shared/renderTarget/RenderTargetSystem';\nimport { GlRenderTargetAdaptor } from './GlRenderTargetAdaptor';\n\nimport type { GlRenderTarget } from '../GlRenderTarget';\nimport type { WebGLRenderer } from '../WebGLRenderer';\n\n/**\n * The WebGL adaptor for the render target system. Allows the Render Target System to be used with the WebGl renderer\n * @memberof rendering\n */\nexport class GlRenderTargetSystem extends RenderTargetSystem<GlRenderTarget>\n{\n    /** @ignore */\n    public static extension = {\n        type: [ExtensionType.WebGLSystem],\n        name: 'renderTarget',\n    } as const;\n\n    public adaptor = new GlRenderTargetAdaptor();\n\n    constructor(renderer: WebGLRenderer)\n    {\n        super(renderer);\n\n        this.adaptor.init(renderer, this);\n    }\n}\n","function booleanArray(size: number): Array<boolean>\n{\n    const array = new Array(size);\n\n    for (let i = 0; i < array.length; i++)\n    {\n        array[i] = false;\n    }\n\n    return array;\n}\n\n/**\n * @method defaultValue\n * @param {string} type - Type of value\n * @param {number} size\n * @private\n */\nexport function defaultValue(\n    type: string,\n    size: number\n): number | Float32Array | Int32Array | Uint32Array | boolean | boolean[]\n{\n    switch (type)\n    {\n        case 'float':\n            return 0;\n\n        case 'vec2':\n            return new Float32Array(2 * size);\n\n        case 'vec3':\n            return new Float32Array(3 * size);\n\n        case 'vec4':\n            return new Float32Array(4 * size);\n\n        case 'int':\n        case 'uint':\n        case 'sampler2D':\n        case 'sampler2DArray':\n            return 0;\n\n        case 'ivec2':\n            return new Int32Array(2 * size);\n\n        case 'ivec3':\n            return new Int32Array(3 * size);\n\n        case 'ivec4':\n            return new Int32Array(4 * size);\n\n        case 'uvec2':\n            return new Uint32Array(2 * size);\n\n        case 'uvec3':\n            return new Uint32Array(3 * size);\n\n        case 'uvec4':\n            return new Uint32Array(4 * size);\n\n        case 'bool':\n            return false;\n\n        case 'bvec2':\n\n            return booleanArray(2 * size);\n\n        case 'bvec3':\n            return booleanArray(3 * size);\n\n        case 'bvec4':\n            return booleanArray(4 * size);\n\n        case 'mat2':\n            return new Float32Array([1, 0,\n                0, 1]);\n\n        case 'mat3':\n            return new Float32Array([1, 0, 0,\n                0, 1, 0,\n                0, 0, 1]);\n\n        case 'mat4':\n            return new Float32Array([1, 0, 0, 0,\n                0, 1, 0, 0,\n                0, 0, 1, 0,\n                0, 0, 0, 1]);\n    }\n\n    return null;\n}\n","import { extensions, ExtensionType } from '../../../extensions/Extensions';\nimport { GlGraphicsAdaptor } from '../../../scene/graphics/gl/GlGraphicsAdaptor';\nimport { GlMeshAdaptor } from '../../../scene/mesh/gl/GlMeshAdaptor';\nimport { GlBatchAdaptor } from '../../batcher/gl/GlBatchAdaptor';\nimport { AbstractRenderer } from '../shared/system/AbstractRenderer';\nimport { SharedRenderPipes, SharedSystems } from '../shared/system/SharedSystems';\nimport { RendererType } from '../types';\nimport { GlBufferSystem } from './buffer/GlBufferSystem';\nimport { GlContextSystem } from './context/GlContextSystem';\nimport { GlGeometrySystem } from './geometry/GlGeometrySystem';\nimport { GlBackBufferSystem } from './GlBackBufferSystem';\nimport { GlColorMaskSystem } from './GlColorMaskSystem';\nimport { GlEncoderSystem } from './GlEncoderSystem';\nimport { GlStencilSystem } from './GlStencilSystem';\nimport { GlUboSystem } from './GlUboSystem';\nimport { GlRenderTargetSystem } from './renderTarget/GlRenderTargetSystem';\nimport { GlShaderSystem } from './shader/GlShaderSystem';\nimport { GlUniformGroupSystem } from './shader/GlUniformGroupSystem';\nimport { GlStateSystem } from './state/GlStateSystem';\nimport { GlTextureSystem } from './texture/GlTextureSystem';\n\nimport type { ICanvas } from '../../../environment/canvas/ICanvas';\nimport type { PipeConstructor } from '../shared/instructions/RenderPipe';\nimport type { SharedRendererOptions } from '../shared/system/SharedSystems';\nimport type { SystemConstructor } from '../shared/system/System';\nimport type { ExtractRendererOptions, ExtractSystemTypes } from '../shared/system/utils/typeUtils';\nimport type { GlRenderingContext } from './context/GlRenderingContext';\n\nconst DefaultWebGLSystems = [\n    ...SharedSystems,\n    GlUboSystem,\n    GlBackBufferSystem,\n    GlContextSystem,\n    GlBufferSystem,\n    GlTextureSystem,\n    GlRenderTargetSystem,\n    GlGeometrySystem,\n    GlUniformGroupSystem,\n    GlShaderSystem,\n    GlEncoderSystem,\n    GlStateSystem,\n    GlStencilSystem,\n    GlColorMaskSystem,\n];\nconst DefaultWebGLPipes = [...SharedRenderPipes];\nconst DefaultWebGLAdapters = [GlBatchAdaptor, GlMeshAdaptor, GlGraphicsAdaptor];\n\n// installed systems will bbe added to this array by the extensions manager..\nconst systems: { name: string; value: SystemConstructor }[] = [];\nconst renderPipes: { name: string; value: PipeConstructor }[] = [];\nconst renderPipeAdaptors: { name: string; value: any }[] = [];\n\nextensions.handleByNamedList(ExtensionType.WebGLSystem, systems);\nextensions.handleByNamedList(ExtensionType.WebGLPipes, renderPipes);\nextensions.handleByNamedList(ExtensionType.WebGLPipesAdaptor, renderPipeAdaptors);\n\n// add all the default systems as well as any user defined ones from the extensions\nextensions.add(...DefaultWebGLSystems, ...DefaultWebGLPipes, ...DefaultWebGLAdapters);\n\n/** The default WebGL renderer, uses WebGL2 contexts. */\ntype WebGLSystems = ExtractSystemTypes<typeof DefaultWebGLSystems> & PixiMixins.RendererSystems & PixiMixins.WebGLSystems;\n\n/** The default WebGL renderer, uses WebGL2 contexts. */\nexport type WebGLPipes = ExtractSystemTypes<typeof DefaultWebGLPipes> & PixiMixins.RendererPipes & PixiMixins.WebGLPipes;\n\n/**\n * Options for WebGLRenderer.\n * @memberof rendering\n */\nexport interface WebGLOptions\n    extends\n    SharedRendererOptions,\n    ExtractRendererOptions<typeof DefaultWebGLSystems>,\n    PixiMixins.WebGLOptions {}\n\n/**\n * The default WebGL renderer, uses WebGL2 contexts.\n * @memberof rendering\n */\nexport interface WebGLRenderer<T extends ICanvas = HTMLCanvasElement>\n    extends AbstractRenderer<WebGLPipes, WebGLOptions, T>,\n    WebGLSystems {}\n\n/* eslint-disable max-len */\n/**\n * The WebGL PixiJS Renderer. This renderer allows you to use the most common graphics API, WebGL (and WebGL2).\n *\n * ```ts\n * // Create a new renderer\n * const renderer = new WebGLRenderer();\n * await renderer.init();\n *\n * // Add the renderer to the stage\n * document.body.appendChild(renderer.canvas);\n *\n * // Create a new stage\n * const stage = new Container();\n *\n * // Render the stage\n * renderer.render(stage);\n * ```\n *\n * You can use {@link rendering.autoDetectRenderer} to create a renderer that will automatically detect the best\n * renderer for the environment.\n *\n *\n * ```ts\n * // Create a new renderer\n * const renderer = await rendering.autoDetectRenderer({\n *    preference:'webgl',\n * });\n * ```\n *\n * The renderer is composed of systems that manage specific tasks. The following systems are added by default\n * whenever you create a WebGL renderer:\n *\n * | WebGL Core Systems                          | Systems that are specific to the WebGL renderer                               |\n * | ------------------------------------------- | ----------------------------------------------------------------------------- |\n * | {@link rendering.GlUboSystem}               | This manages WebGL2 uniform buffer objects feature for shaders                |\n * | {@link rendering.GlBackBufferSystem}        | manages the back buffer, used so that we can pixi can pixels from the screen  |\n * | {@link rendering.GlContextSystem}           | This manages the WebGL context and its extensions                             |\n * | {@link rendering.GlBufferSystem}            | This manages buffers and their GPU resources, keeps everything in sync        |\n * | {@link rendering.GlTextureSystem}           | This manages textures and their GPU resources, keeps everything in sync       |\n * | {@link rendering.GlRenderTargetSystem}      | This manages what we render too. For example the screen, or another texture   |\n * | {@link rendering.GlGeometrySystem}          | This manages geometry, used for drawing meshes via the GPU                    |\n * | {@link rendering.GlUniformGroupSystem}      | This manages uniform groups. Syncing shader properties with the GPU           |\n * | {@link rendering.GlShaderSystem}            | This manages shaders, programs that run on the GPU to output lovely pixels    |\n * | {@link rendering.GlEncoderSystem}           | This manages encoders, a WebGPU Paradigm, use it to draw a mesh + shader      |\n * | {@link rendering.GlStateSystem}             | This manages the state of the WebGL context. eg the various flags that can be set blend modes / depthTesting etc |\n * | {@link rendering.GlStencilSystem}           | This manages the stencil buffer. Used primarily for masking                   |\n * | {@link rendering.GlColorMaskSystem}         | This manages the color mask. Used for color masking                           |\n *\n * The breadth of the API surface provided by the renderer is contained within these systems.\n * @memberof rendering\n * @property {rendering.GlUboSystem} ubo - UboSystem instance.\n * @property {rendering.GlBackBufferSystem} backBuffer - BackBufferSystem instance.\n * @property {rendering.GlContextSystem} context - ContextSystem instance.\n * @property {rendering.GlBufferSystem} buffer - BufferSystem instance.\n * @property {rendering.GlTextureSystem} texture - TextureSystem instance.\n * @property {rendering.GlRenderTargetSystem} renderTarget - RenderTargetSystem instance.\n * @property {rendering.GlGeometrySystem} geometry - GeometrySystem instance.\n * @property {rendering.GlUniformGroupSystem} uniformGroup - UniformGroupSystem instance.\n * @property {rendering.GlShaderSystem} shader - ShaderSystem instance.\n * @property {rendering.GlEncoderSystem} encoder - EncoderSystem instance.\n * @property {rendering.GlStateSystem} state - StateSystem instance.\n * @property {rendering.GlStencilSystem} stencil - StencilSystem instance.\n * @property {rendering.GlColorMaskSystem} colorMask - ColorMaskSystem instance.\n * @extends rendering.AbstractRenderer\n */\n/* eslint-enable max-len */\nexport class WebGLRenderer<T extends ICanvas = HTMLCanvasElement>\n    extends AbstractRenderer<WebGLPipes, WebGLOptions, T>\n    implements WebGLSystems\n{\n    public gl: GlRenderingContext;\n\n    constructor()\n    {\n        const systemConfig = {\n            name: 'webgl',\n            type: RendererType.WEBGL,\n            systems,\n            renderPipes,\n            renderPipeAdaptors,\n        };\n\n        super(systemConfig);\n    }\n}\n","// cu = Cached value's uniform data field\n// cv = Cached value\n// v = value to upload\n// ud = uniformData\n// uv = uniformValue\n\nimport { BufferResource } from '../../../shared/buffer/BufferResource';\nimport { UniformGroup } from '../../../shared/shader/UniformGroup';\nimport { uniformParsers } from '../../../shared/shader/utils/uniformParsers';\nimport { UNIFORM_TO_ARRAY_SETTERS, UNIFORM_TO_SINGLE_SETTERS } from './generateUniformsSyncTypes';\n\nimport type { UniformsSyncCallback } from '../../../shared/shader/types';\n\nexport function generateUniformsSync(group: UniformGroup, uniformData: Record<string, any>): UniformsSyncCallback\n{\n    const funcFragments = [`\n        var v = null;\n        var cv = null;\n        var cu = null;\n        var t = 0;\n        var gl = renderer.gl;\n        var name = null;\n    `];\n\n    for (const i in group.uniforms)\n    {\n        if (!uniformData[i])\n        {\n            if (group.uniforms[i] instanceof UniformGroup)\n            {\n                if ((group.uniforms[i] as UniformGroup).ubo)\n                {\n                    funcFragments.push(`\n                        renderer.shader.bindUniformBlock(uv.${i}, \"${i}\");\n                    `);\n                }\n                else\n                {\n                    funcFragments.push(`\n                        renderer.shader.updateUniformGroup(uv.${i});\n                    `);\n                }\n            }\n            else if (group.uniforms[i] instanceof BufferResource)\n            {\n                funcFragments.push(`\n                        renderer.shader.bindBufferResource(uv.${i}, \"${i}\");\n                    `);\n            }\n\n            continue;\n        }\n\n        const uniform = group.uniformStructures[i];\n\n        let parsed = false;\n\n        for (let j = 0; j < uniformParsers.length; j++)\n        {\n            const parser = uniformParsers[j];\n\n            if (uniform.type === parser.type && parser.test(uniform))\n            {\n                funcFragments.push(`name = \"${i}\";`, uniformParsers[j].uniform);\n                parsed = true;\n\n                break;\n            }\n        }\n\n        if (!parsed)\n        {\n            const templateType = uniform.size === 1 ? UNIFORM_TO_SINGLE_SETTERS : UNIFORM_TO_ARRAY_SETTERS;\n\n            const template = templateType[uniform.type].replace('location', `ud[\"${i}\"].location`);\n\n            funcFragments.push(`\n            cu = ud[\"${i}\"];\n            cv = cu.value;\n            v = uv[\"${i}\"];\n            ${template};`);\n        }\n    }\n\n    /*\n     * the introduction of syncData is to solve an issue where textures in uniform groups are not set correctly\n     * the texture count was always starting from 0 in each group. This needs to increment each time a texture is used\n     * no matter which group is being used\n     *\n     */\n    // eslint-disable-next-line no-new-func\n    return new Function('ud', 'uv', 'renderer', 'syncData', funcFragments.join('\\n')) as UniformsSyncCallback;\n}\n","// cu = Cached value's uniform data field\n// cv = Cached value\n// v = value to upload\n// ud = uniformData\n// uv = uniformValue\n\nimport type { UNIFORM_TYPES } from '../../../shared/shader/types';\n\nexport type ArraySetterFunction = (v: any, location: WebGLUniformLocation, gl: any) => void;\n\nexport const UNIFORM_TO_SINGLE_SETTERS: Record<UNIFORM_TYPES | string, string> = {\n    f32: `if (cv !== v) {\n            cu.value = v;\n            gl.uniform1f(location, v);\n        }`,\n    'vec2<f32>': `if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2f(location, v[0], v[1]);\n        }`,\n    'vec3<f32>': `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3f(location, v[0], v[1], v[2]);\n        }`,\n    'vec4<f32>': `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4f(location, v[0], v[1], v[2], v[3]);\n        }`,\n    i32: `if (cv !== v) {\n            cu.value = v;\n            gl.uniform1i(location, v);\n        }`,\n    'vec2<i32>': `if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2i(location, v[0], v[1]);\n        }`,\n    'vec3<i32>': `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3i(location, v[0], v[1], v[2]);\n        }`,\n    'vec4<i32>': `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4i(location, v[0], v[1], v[2], v[3]);\n        }`,\n    u32: `if (cv !== v) {\n            cu.value = v;\n            gl.uniform1ui(location, v);\n        }`,\n    'vec2<u32>': `if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2ui(location, v[0], v[1]);\n        }`,\n    'vec3<u32>': `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3ui(location, v[0], v[1], v[2]);\n        }`,\n    'vec4<u32>': `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4ui(location, v[0], v[1], v[2], v[3]);\n        }`,\n    bool: `if (cv !== v) {\n            cu.value = v;\n            gl.uniform1i(location, v);\n        }`,\n    'vec2<bool>': `if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2i(location, v[0], v[1]);\n        }`,\n    'vec3<bool>': `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3i(location, v[0], v[1], v[2]);\n        }`,\n    'vec4<bool>': `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4i(location, v[0], v[1], v[2], v[3]);\n        }`,\n    'mat2x2<f32>': `gl.uniformMatrix2fv(location, false, v);`,\n    'mat3x3<f32>': `gl.uniformMatrix3fv(location, false, v);`,\n    'mat4x4<f32>': `gl.uniformMatrix4fv(location, false, v);`,\n};\n\nexport const UNIFORM_TO_ARRAY_SETTERS: Record<UNIFORM_TYPES | string, string> = {\n    f32: `gl.uniform1fv(location, v);`,\n    'vec2<f32>': `gl.uniform2fv(location, v);`,\n    'vec3<f32>': `gl.uniform3fv(location, v);`,\n    'vec4<f32>': `gl.uniform4fv(location, v);`,\n    'mat2x2<f32>': `gl.uniformMatrix2fv(location, false, v);`,\n    'mat3x3<f32>': `gl.uniformMatrix3fv(location, false, v);`,\n    'mat4x4<f32>': `gl.uniformMatrix4fv(location, false, v);`,\n    i32: `gl.uniform1iv(location, v);`,\n    'vec2<i32>': `gl.uniform2iv(location, v);`,\n    'vec3<i32>': `gl.uniform3iv(location, v);`,\n    'vec4<i32>': `gl.uniform4iv(location, v);`,\n    u32: `gl.uniform1iv(location, v);`,\n    'vec2<u32>': `gl.uniform2iv(location, v);`,\n    'vec3<u32>': `gl.uniform3iv(location, v);`,\n    'vec4<u32>': `gl.uniform4iv(location, v);`,\n    bool: `gl.uniform1iv(location, v);`,\n    'vec2<bool>': `gl.uniform2iv(location, v);`,\n    'vec3<bool>': `gl.uniform3iv(location, v);`,\n    'vec4<bool>': `gl.uniform4iv(location, v);`,\n};\n","import { BufferResource } from '../../shared/buffer/BufferResource';\nimport { UniformGroup } from '../../shared/shader/UniformGroup';\nimport { TextureSource } from '../../shared/texture/sources/TextureSource';\n\nimport type { Shader } from '../../shared/shader/Shader';\nimport type { GlShaderSystem, ShaderSyncFunction } from './GlShaderSystem';\n\n/**\n * Generates the a function that will efficiantly sync shader resources with the GPU.\n * @param shader - The shader to generate the code for\n * @param shaderSystem - An instance of the shader system\n */\nexport function generateShaderSyncCode(shader: Shader, shaderSystem: GlShaderSystem): ShaderSyncFunction\n{\n    const funcFragments: string[] = [];\n\n    /**\n     * rS = renderer.shader\n     * sS = shaderSystem\n     * sD = shaderData\n     * g = shader.groups\n     * s = shader\n     * r = renderer\n     * ugS = renderer.uniformGroupSystem\n     */\n    const headerFragments: string[] = [`\n        var g = s.groups;\n        var sS = r.shader;\n        var p = s.glProgram;\n        var ugS = r.uniformGroup;\n        var resources;\n    `];\n\n    let addedTextreSystem = false;\n    let blockIndex = 0;\n    let textureCount = 0;\n\n    const programData = shaderSystem._getProgramData(shader.glProgram);\n\n    for (const i in shader.groups)\n    {\n        const group = shader.groups[i];\n\n        funcFragments.push(`\n            resources = g[${i}].resources;\n        `);\n\n        for (const j in group.resources)\n        {\n            const resource = group.resources[j];\n\n            if (resource instanceof UniformGroup)\n            {\n                if (resource.ubo)\n                {\n                    funcFragments.push(`\n                        sS.bindUniformBlock(\n                            resources[${j}],\n                            sS._uniformBindMap[${i}[${j}],\n                            ${blockIndex++}\n                        );\n                    `);\n                }\n                else\n                {\n                    funcFragments.push(`\n                        ugS.updateUniformGroup(resources[${j}], p, sD);\n                    `);\n                }\n            }\n            else if (resource instanceof BufferResource)\n            {\n                funcFragments.push(`\n                    sS.bindUniformBlock(\n                        resources[${j}],\n                        sS._uniformBindMap[${i}[${j}],\n                        ${blockIndex++}\n                    );\n                `);\n            }\n            else if (resource instanceof TextureSource)\n            {\n                const uniformName = shader._uniformBindMap[i as unknown as number][j as unknown as number];\n\n                const uniformData = programData.uniformData[uniformName];\n\n                if (uniformData)\n                {\n                    if (!addedTextreSystem)\n                    {\n                        addedTextreSystem = true;\n                        headerFragments.push(`\n                        var tS = r.texture;\n                        `);\n                    }\n\n                    shaderSystem._gl.uniform1i(uniformData.location, textureCount);\n\n                    funcFragments.push(`\n                        tS.bind(resources[${j}], ${textureCount});\n                    `);\n\n                    textureCount++;\n                }\n            }\n        }\n    }\n\n    const functionSource = [...headerFragments, ...funcFragments].join('\\n');\n\n    // eslint-disable-next-line no-new-func\n    return new Function('r', 's', 'sD', functionSource) as ShaderSyncFunction;\n}\n","import type { UboElement, UboLayout, UniformData } from '../../../shared/shader/types';\n\nexport const WGSL_TO_STD40_SIZE: Record<string, number> = {\n    f32: 4,\n    'vec2<f32>': 8,\n    'vec3<f32>': 12,\n    'vec4<f32>': 16,\n\n    'mat2x2<f32>': 16 * 2,\n    'mat3x3<f32>': 16 * 3,\n    'mat4x4<f32>': 16 * 4,\n\n    // TODO - not essential for now but support these in the future\n    // int:      4,\n    // ivec2:    8,\n    // ivec3:    12,\n    // ivec4:    16,\n\n    // uint:     4,\n    // uvec2:    8,\n    // uvec3:    12,\n    // uvec4:    16,\n\n    // bool:     4,\n    // bvec2:    8,\n    // bvec3:    12,\n    // bvec4:    16,\n\n    // mat2:     16 * 2,\n    // mat3:     16 * 3,\n    // mat4:     16 * 4,\n};\n\nexport function createUboElementsSTD40(uniformData: UniformData[]): UboLayout\n{\n    const uboElements: UboElement[] = uniformData.map((data: UniformData) =>\n        ({\n            data,\n            offset: 0,\n            size: 0,\n        }));\n\n    let size = 0;\n    let chunkSize = 0;\n    let offset = 0;\n\n    for (let i = 0; i < uboElements.length; i++)\n    {\n        const uboElement = uboElements[i];\n\n        size = WGSL_TO_STD40_SIZE[uboElement.data.type];\n\n        if (!size)\n        {\n            throw new Error(`Unknown type ${uboElement.data.type}`);\n        }\n\n        if (uboElement.data.size > 1)\n        {\n            size = Math.max(size, 16) * uboElement.data.size;\n        }\n\n        uboElement.size = size;\n\n        // add some size offset..\n        // must align to the nearest 16 bytes or internally nearest round size\n        if (chunkSize % size !== 0 && chunkSize < 16)\n        {\n            // diff required to line up..\n            const lineUpValue = (chunkSize % size) % 16;\n\n            chunkSize += lineUpValue;\n            offset += lineUpValue;\n        }\n\n        if ((chunkSize + size) > 16)\n        {\n            offset = Math.ceil(offset / 16) * 16;\n            uboElement.offset = offset;\n            offset += size;\n            chunkSize = size;\n        }\n        else\n        {\n            uboElement.offset = offset;\n            chunkSize += size;\n            offset += size;\n        }\n    }\n\n    offset = Math.ceil(offset / 16) * 16;\n\n    return { uboElements, size: offset };\n}\n\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { UboSystem } from '../shared/shader/UboSystem';\nimport { createUboElementsSTD40 } from './shader/utils/createUboElementsSTD40';\nimport { createUboSyncFunctionSTD40 } from './shader/utils/createUboSyncSTD40';\n\n/**\n * System plugin to the renderer to manage uniform buffers. But with an WGSL adaptor.\n * @memberof rendering\n */\nexport class GlUboSystem extends UboSystem\n{\n    /** @ignore */\n    public static extension = {\n        type: [ExtensionType.WebGLSystem],\n        name: 'ubo',\n    } as const;\n\n    constructor()\n    {\n        super({\n            createUboElements: createUboElementsSTD40,\n            generateUboSync: createUboSyncFunctionSTD40,\n        });\n    }\n}\n","import { DOMAdapter } from '../../../../environment/adapter';\nimport { ExtensionType } from '../../../../extensions/Extensions';\nimport { Texture } from '../../shared/texture/Texture';\nimport { GlTexture } from './GlTexture';\nimport { glUploadBufferImageResource } from './uploaders/glUploadBufferImageResource';\nimport { glUploadCompressedTextureResource } from './uploaders/glUploadCompressedTextureResource';\nimport { glUploadImageResource } from './uploaders/glUploadImageResource';\nimport { glUploadVideoResource } from './uploaders/glUploadVideoResource';\nimport { applyStyleParams } from './utils/applyStyleParams';\nimport { mapFormatToGlFormat } from './utils/mapFormatToGlFormat';\nimport { mapFormatToGlInternalFormat } from './utils/mapFormatToGlInternalFormat';\nimport { mapFormatToGlType } from './utils/mapFormatToGlType';\nimport { unpremultiplyAlpha } from './utils/unpremultiplyAlpha';\n\nimport type { ICanvas } from '../../../../environment/canvas/ICanvas';\nimport type { System } from '../../shared/system/System';\nimport type { CanvasGenerator, GetPixelsOutput } from '../../shared/texture/GenerateCanvas';\nimport type { TextureSource } from '../../shared/texture/sources/TextureSource';\nimport type { BindableTexture } from '../../shared/texture/Texture';\nimport type { TextureStyle } from '../../shared/texture/TextureStyle';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\nimport type { WebGLRenderer } from '../WebGLRenderer';\nimport type { GLTextureUploader } from './uploaders/GLTextureUploader';\n\nconst BYTES_PER_PIXEL = 4;\n\n/**\n * The system for managing textures in WebGL.\n * @memberof rendering\n */\nexport class GlTextureSystem implements System, CanvasGenerator\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'texture',\n    } as const;\n\n    public readonly managedTextures: TextureSource[] = [];\n\n    private readonly _renderer: WebGLRenderer;\n\n    private _glTextures: Record<number, GlTexture> = Object.create(null);\n    private _glSamplers: Record<string, WebGLSampler> = Object.create(null);\n\n    private _boundTextures: TextureSource[] = [];\n    private _activeTextureLocation = -1;\n\n    private _boundSamplers: Record<number, WebGLSampler> = Object.create(null);\n\n    private readonly _uploads: Record<string, GLTextureUploader> = {\n        image: glUploadImageResource,\n        buffer: glUploadBufferImageResource,\n        video: glUploadVideoResource,\n        compressed: glUploadCompressedTextureResource,\n    };\n\n    private _gl: GlRenderingContext;\n    private _mapFormatToInternalFormat: Record<string, number>;\n    private _mapFormatToType: Record<string, number>;\n    private _mapFormatToFormat: Record<string, number>;\n\n    // TODO - separate samplers will be a cool thing to add, but not right now!\n    private readonly _useSeparateSamplers = false;\n\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    protected contextChange(gl: GlRenderingContext): void\n    {\n        this._gl = gl;\n\n        if (!this._mapFormatToInternalFormat)\n        {\n            this._mapFormatToInternalFormat = mapFormatToGlInternalFormat(gl, this._renderer.context.extensions);\n\n            this._mapFormatToType = mapFormatToGlType(gl);\n            this._mapFormatToFormat = mapFormatToGlFormat(gl);\n        }\n\n        this._glTextures = Object.create(null);\n        this._glSamplers = Object.create(null);\n        this._boundSamplers = Object.create(null);\n\n        for (let i = 0; i < 16; i++)\n        {\n            this.bind(Texture.EMPTY, i);\n        }\n    }\n\n    public initSource(source: TextureSource)\n    {\n        this.bind(source);\n    }\n\n    public bind(texture: BindableTexture, location = 0)\n    {\n        const source = texture.source;\n\n        if (texture)\n        {\n            this.bindSource(source, location);\n\n            if (this._useSeparateSamplers)\n            {\n                this._bindSampler(source.style, location);\n            }\n        }\n        else\n        {\n            this.bindSource(null, location);\n\n            if (this._useSeparateSamplers)\n            {\n                this._bindSampler(null, location);\n            }\n        }\n    }\n\n    public bindSource(source: TextureSource, location = 0): void\n    {\n        const gl = this._gl;\n\n        source._touched = this._renderer.textureGC.count;\n\n        if (this._boundTextures[location] !== source)\n        {\n            this._boundTextures[location] = source;\n            this._activateLocation(location);\n\n            source = source || Texture.EMPTY.source;\n\n            // bind texture and source!\n            const glTexture = this.getGlSource(source);\n\n            gl.bindTexture(glTexture.target, glTexture.texture);\n        }\n    }\n\n    private _bindSampler(style: TextureStyle, location = 0): void\n    {\n        const gl = this._gl;\n\n        if (!style)\n        {\n            this._boundSamplers[location] = null;\n            gl.bindSampler(location, null);\n\n            return;\n        }\n\n        const sampler = this._getGlSampler(style);\n\n        if (this._boundSamplers[location] !== sampler)\n        {\n            this._boundSamplers[location] = sampler;\n            gl.bindSampler(location, sampler);\n        }\n    }\n\n    public unbind(texture: BindableTexture): void\n    {\n        const source = texture.source;\n        const boundTextures = this._boundTextures;\n        const gl = this._gl;\n\n        for (let i = 0; i < boundTextures.length; i++)\n        {\n            if (boundTextures[i] === source)\n            {\n                this._activateLocation(i);\n\n                const glTexture = this.getGlSource(source);\n\n                gl.bindTexture(glTexture.target, null);\n                boundTextures[i] = null;\n            }\n        }\n    }\n\n    private _activateLocation(location: number): void\n    {\n        if (this._activeTextureLocation !== location)\n        {\n            this._activeTextureLocation = location;\n            this._gl.activeTexture(this._gl.TEXTURE0 + location);\n        }\n    }\n\n    private _initSource(source: TextureSource): GlTexture\n    {\n        const gl = this._gl;\n\n        const glTexture = new GlTexture(gl.createTexture());\n\n        glTexture.type = this._mapFormatToType[source.format];\n        glTexture.internalFormat = this._mapFormatToInternalFormat[source.format];\n        glTexture.format = this._mapFormatToFormat[source.format];\n\n        if (source.autoGenerateMipmaps && (this._renderer.context.supports.nonPowOf2mipmaps || source.isPowerOfTwo))\n        {\n            const biggestDimension = Math.max(source.width, source.height);\n\n            source.mipLevelCount = Math.floor(Math.log2(biggestDimension)) + 1;\n        }\n\n        this._glTextures[source.uid] = glTexture;\n\n        if (!this.managedTextures.includes(source))\n        {\n            source.on('update', this.onSourceUpdate, this);\n            source.on('resize', this.onSourceUpdate, this);\n            source.on('styleChange', this.onStyleChange, this);\n            source.on('destroy', this.onSourceDestroy, this);\n            source.on('unload', this.onSourceUnload, this);\n            source.on('updateMipmaps', this.onUpdateMipmaps, this);\n\n            this.managedTextures.push(source);\n        }\n\n        this.onSourceUpdate(source);\n        this.updateStyle(source, false);\n\n        return glTexture;\n    }\n\n    protected onStyleChange(source: TextureSource): void\n    {\n        this.updateStyle(source, false);\n    }\n\n    protected updateStyle(source: TextureSource, firstCreation: boolean): void\n    {\n        const gl = this._gl;\n\n        const glTexture = this.getGlSource(source);\n\n        gl.bindTexture(gl.TEXTURE_2D, glTexture.texture);\n\n        this._boundTextures[this._activeTextureLocation] = source;\n\n        applyStyleParams(\n            source.style,\n            gl,\n            source.mipLevelCount > 1,\n            this._renderer.context.extensions.anisotropicFiltering,\n            'texParameteri',\n            gl.TEXTURE_2D,\n            // will force a clamp to edge if the texture is not a power of two\n            !this._renderer.context.supports.nonPowOf2wrapping && !source.isPowerOfTwo,\n            firstCreation,\n        );\n    }\n\n    protected onSourceUnload(source: TextureSource): void\n    {\n        const glTexture = this._glTextures[source.uid];\n\n        if (!glTexture) return;\n\n        this.unbind(source);\n        this._glTextures[source.uid] = null;\n\n        this._gl.deleteTexture(glTexture.texture);\n    }\n\n    protected onSourceUpdate(source: TextureSource): void\n    {\n        const gl = this._gl;\n\n        const glTexture = this.getGlSource(source);\n\n        gl.bindTexture(gl.TEXTURE_2D, glTexture.texture);\n\n        this._boundTextures[this._activeTextureLocation] = source;\n\n        if (this._uploads[source.uploadMethodId])\n        {\n            this._uploads[source.uploadMethodId].upload(source, glTexture, gl, this._renderer.context.webGLVersion);\n        }\n        else\n        {\n            // eslint-disable-next-line max-len\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, source.pixelWidth, source.pixelHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n        }\n\n        if (source.autoGenerateMipmaps && source.mipLevelCount > 1)\n        {\n            this.onUpdateMipmaps(source, false);\n        }\n    }\n\n    protected onUpdateMipmaps(source: TextureSource, bind = true): void\n    {\n        if (bind) this.bindSource(source, 0);\n\n        const glTexture = this.getGlSource(source);\n\n        this._gl.generateMipmap(glTexture.target);\n    }\n\n    protected onSourceDestroy(source: TextureSource): void\n    {\n        source.off('destroy', this.onSourceDestroy, this);\n        source.off('update', this.onSourceUpdate, this);\n        source.off('resize', this.onSourceUpdate, this);\n        source.off('unload', this.onSourceUnload, this);\n        source.off('styleChange', this.onStyleChange, this);\n        source.off('updateMipmaps', this.onUpdateMipmaps, this);\n\n        this.managedTextures.splice(this.managedTextures.indexOf(source), 1);\n\n        this.onSourceUnload(source);\n    }\n\n    private _initSampler(style: TextureStyle): WebGLSampler\n    {\n        const gl = this._gl;\n\n        const glSampler = this._gl.createSampler();\n\n        this._glSamplers[style._resourceId] = glSampler;\n\n        applyStyleParams(\n            style,\n            gl,\n            this._boundTextures[this._activeTextureLocation].mipLevelCount > 1,\n            this._renderer.context.extensions.anisotropicFiltering,\n            'samplerParameteri',\n            glSampler,\n            false,\n            true,\n        );\n\n        return this._glSamplers[style._resourceId];\n    }\n\n    private _getGlSampler(sampler: TextureStyle): WebGLSampler\n    {\n        return this._glSamplers[sampler._resourceId] || this._initSampler(sampler);\n    }\n\n    public getGlSource(source: TextureSource): GlTexture\n    {\n        return this._glTextures[source.uid] || this._initSource(source);\n    }\n\n    public generateCanvas(texture: Texture): ICanvas\n    {\n        const { pixels, width, height } = this.getPixels(texture);\n\n        const canvas = DOMAdapter.get().createCanvas();\n\n        canvas.width = width;\n        canvas.height = height;\n\n        const ctx = canvas.getContext('2d');\n\n        if (ctx)\n        {\n            const imageData = ctx.createImageData(width, height);\n\n            imageData.data.set(pixels);\n            ctx.putImageData(imageData, 0, 0);\n        }\n\n        return canvas;\n    }\n\n    public getPixels(texture: Texture): GetPixelsOutput\n    {\n        const resolution = texture.source.resolution;\n        const frame = texture.frame;\n\n        const width = Math.max(Math.round(frame.width * resolution), 1);\n        const height = Math.max(Math.round(frame.height * resolution), 1);\n        const pixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n\n        const renderer = this._renderer;\n\n        const renderTarget = renderer.renderTarget.getRenderTarget(texture);\n        const glRenterTarget = renderer.renderTarget.getGpuRenderTarget(renderTarget);\n\n        const gl = renderer.gl;\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, glRenterTarget.resolveTargetFramebuffer);\n\n        gl.readPixels(\n            Math.round(frame.x * resolution),\n            Math.round(frame.y * resolution),\n            width,\n            height,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            pixels\n        );\n\n        // if (texture.source.premultiplyAlpha > 0)\n        // TODO - premultiplied alpha does not exist right now, need to add that back in!\n        // eslint-disable-next-line no-constant-condition\n        if (false)\n        {\n            unpremultiplyAlpha(pixels);\n        }\n\n        return { pixels: new Uint8ClampedArray(pixels.buffer), width, height };\n    }\n\n    public destroy(): void\n    {\n        // we copy the array as the array with a slice as onSourceDestroy\n        // will remove the source from the real managedTextures array\n        this.managedTextures\n            .slice()\n            .forEach((source) => this.onSourceDestroy(source));\n\n        (this.managedTextures as null) = null;\n\n        (this._renderer as null) = null;\n    }\n}\n\n","/* eslint-disable quote-props */\n\nimport { createUboSyncFunction } from '../../../shared/shader/utils/createUboSyncFunction';\nimport { uboSyncFunctionsSTD40 } from '../../../shared/shader/utils/uboSyncFunctions';\nimport { generateArraySyncSTD40 } from './generateArraySyncSTD40';\n\nimport type { UboElement, UniformsSyncCallback } from '../../../shared/shader/types';\n\nexport function createUboSyncFunctionSTD40(\n    uboElements: UboElement[],\n): UniformsSyncCallback\n{\n    return createUboSyncFunction(\n        uboElements,\n        'uboStd40',\n        generateArraySyncSTD40,\n        uboSyncFunctionsSTD40,\n    );\n}\n","import { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport { warn } from '../../../../utils/logging/warn';\nimport { CLEAR } from '../const';\nimport { GlRenderTarget } from '../GlRenderTarget';\n\nimport type { RgbaArray } from '../../../../color/Color';\nimport type { RenderTarget } from '../../shared/renderTarget/RenderTarget';\nimport type { RenderTargetAdaptor, RenderTargetSystem } from '../../shared/renderTarget/RenderTargetSystem';\nimport type { Texture } from '../../shared/texture/Texture';\nimport type { CLEAR_OR_BOOL } from '../const';\nimport type { WebGLRenderer } from '../WebGLRenderer';\n\n/**\n * The WebGL adaptor for the render target system. Allows the Render Target System to be used with the WebGL renderer\n * @memberof rendering\n * @ignore\n */\nexport class GlRenderTargetAdaptor implements RenderTargetAdaptor<GlRenderTarget>\n{\n    private _renderTargetSystem: RenderTargetSystem<GlRenderTarget>;\n    private _renderer: WebGLRenderer<HTMLCanvasElement>;\n    private _clearColorCache: RgbaArray = [0, 0, 0, 0];\n    private _viewPortCache: Rectangle = new Rectangle();\n\n    public init(renderer: WebGLRenderer, renderTargetSystem: RenderTargetSystem<GlRenderTarget>): void\n    {\n        this._renderer = renderer;\n        this._renderTargetSystem = renderTargetSystem;\n\n        renderer.runners.contextChange.add(this);\n    }\n\n    public contextChange(): void\n    {\n        this._clearColorCache = [0, 0, 0, 0];\n        this._viewPortCache = new Rectangle();\n    }\n\n    public copyToTexture(\n        sourceRenderSurfaceTexture: RenderTarget,\n        destinationTexture: Texture,\n        originSrc: { x: number; y: number; },\n        size: { width: number; height: number; },\n        originDest: { x: number; y: number; },\n    )\n    {\n        const renderTargetSystem = this._renderTargetSystem;\n\n        const renderer = this._renderer;\n        const glRenderTarget = renderTargetSystem.getGpuRenderTarget(sourceRenderSurfaceTexture);\n        const gl = renderer.gl;\n\n        this.finishRenderPass(sourceRenderSurfaceTexture);\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, glRenderTarget.resolveTargetFramebuffer);\n\n        renderer.texture.bind(destinationTexture, 0);\n\n        gl.copyTexSubImage2D(gl.TEXTURE_2D, 0,\n            originDest.x, originDest.y,\n            originSrc.x,\n            originSrc.y,\n            size.width,\n            size.height\n        );\n\n        return destinationTexture;\n    }\n\n    public startRenderPass(\n        renderTarget: RenderTarget,\n        clear: CLEAR_OR_BOOL = true,\n        clearColor?: RgbaArray,\n        viewport?: Rectangle\n    )\n    {\n        const renderTargetSystem = this._renderTargetSystem;\n\n        const source = renderTarget.colorTexture;\n        const gpuRenderTarget = renderTargetSystem.getGpuRenderTarget(renderTarget);\n\n        let viewPortY = viewport.y;\n\n        if (renderTarget.isRoot)\n        {\n            // /TODO this is the same logic?\n            viewPortY = source.pixelHeight - viewport.height;\n        }\n\n        // unbind the current render texture..\n        renderTarget.colorTextures.forEach((texture) =>\n        {\n            this._renderer.texture.unbind(texture);\n        });\n\n        const gl = this._renderer.gl;\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, gpuRenderTarget.framebuffer);\n\n        const viewPortCache = this._viewPortCache;\n\n        if (viewPortCache.x !== viewport.x\n            || viewPortCache.y !== viewPortY\n            || viewPortCache.width !== viewport.width\n            || viewPortCache.height !== viewport.height)\n        {\n            viewPortCache.x = viewport.x;\n            viewPortCache.y = viewPortY;\n            viewPortCache.width = viewport.width;\n            viewPortCache.height = viewport.height;\n\n            gl.viewport(\n                viewport.x,\n                viewPortY,\n                viewport.width,\n                viewport.height,\n            );\n        }\n\n        // if the stencil buffer has been requested, we need to create a stencil buffer\n        if (!gpuRenderTarget.depthStencilRenderBuffer && (renderTarget.stencil || renderTarget.depth))\n        {\n            this._initStencil(gpuRenderTarget);\n        }\n\n        this.clear(renderTarget, clear, clearColor);\n    }\n\n    public finishRenderPass(renderTarget?: RenderTarget)\n    {\n        const renderTargetSystem = this._renderTargetSystem;\n\n        const glRenderTarget = renderTargetSystem.getGpuRenderTarget(renderTarget);\n\n        if (!glRenderTarget.msaa) return;\n\n        const gl = this._renderer.gl;\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, glRenderTarget.resolveTargetFramebuffer);\n        gl.bindFramebuffer(gl.READ_FRAMEBUFFER, glRenderTarget.framebuffer);\n\n        gl.blitFramebuffer(\n            0, 0, glRenderTarget.width, glRenderTarget.height,\n            0, 0, glRenderTarget.width, glRenderTarget.height,\n            gl.COLOR_BUFFER_BIT, gl.NEAREST,\n        );\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, glRenderTarget.framebuffer);\n\n        // dont think we need this anymore? keeping around just in case the wheels fall off\n        // gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);\n    }\n\n    public initGpuRenderTarget(renderTarget: RenderTarget): GlRenderTarget\n    {\n        const renderer = this._renderer;\n\n        const gl = renderer.gl;\n\n        // do single...\n\n        const glRenderTarget = new GlRenderTarget();\n\n        // we are rendering to the main canvas..\n        if (renderTarget.colorTexture.resource === renderer.gl.canvas)\n        {\n            glRenderTarget.framebuffer = null;\n\n            return glRenderTarget;\n        }\n\n        this._initColor(renderTarget, glRenderTarget);\n\n        // set up a depth texture..\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n        return glRenderTarget;\n    }\n\n    public destroyGpuRenderTarget(gpuRenderTarget: GlRenderTarget)\n    {\n        const gl = this._renderer.gl;\n\n        if (gpuRenderTarget.framebuffer)\n        {\n            gl.deleteFramebuffer(gpuRenderTarget.framebuffer);\n            gpuRenderTarget.framebuffer = null;\n        }\n\n        if (gpuRenderTarget.resolveTargetFramebuffer)\n        {\n            gl.deleteFramebuffer(gpuRenderTarget.resolveTargetFramebuffer);\n            gpuRenderTarget.resolveTargetFramebuffer = null;\n        }\n\n        if (gpuRenderTarget.depthStencilRenderBuffer)\n        {\n            gl.deleteRenderbuffer(gpuRenderTarget.depthStencilRenderBuffer);\n            gpuRenderTarget.depthStencilRenderBuffer = null;\n        }\n\n        gpuRenderTarget.msaaRenderBuffer.forEach((renderBuffer) =>\n        {\n            gl.deleteRenderbuffer(renderBuffer);\n        });\n\n        gpuRenderTarget.msaaRenderBuffer = null;\n    }\n\n    public clear(_renderTarget: RenderTarget, clear: CLEAR_OR_BOOL, clearColor?: RgbaArray)\n    {\n        if (!clear) return;\n\n        const renderTargetSystem = this._renderTargetSystem;\n\n        // if clear is boolean..\n        if (typeof clear === 'boolean')\n        {\n            clear = clear ? CLEAR.ALL : CLEAR.NONE;\n        }\n\n        const gl = this._renderer.gl;\n\n        if (clear & CLEAR.COLOR)\n        {\n            clearColor ??= renderTargetSystem.defaultClearColor;\n\n            const clearColorCache = this._clearColorCache;\n            const clearColorArray = clearColor as number[];\n\n            if (clearColorCache[0] !== clearColorArray[0]\n                || clearColorCache[1] !== clearColorArray[1]\n                || clearColorCache[2] !== clearColorArray[2]\n                || clearColorCache[3] !== clearColorArray[3])\n            {\n                clearColorCache[0] = clearColorArray[0];\n                clearColorCache[1] = clearColorArray[1];\n                clearColorCache[2] = clearColorArray[2];\n                clearColorCache[3] = clearColorArray[3];\n\n                gl.clearColor(clearColorArray[0], clearColorArray[1], clearColorArray[2], clearColorArray[3]);\n            }\n        }\n\n        gl.clear(clear);\n    }\n\n    public resizeGpuRenderTarget(renderTarget: RenderTarget)\n    {\n        if (renderTarget.isRoot) return;\n\n        const renderTargetSystem = this._renderTargetSystem;\n\n        const glRenderTarget = renderTargetSystem.getGpuRenderTarget(renderTarget);\n\n        this._resizeColor(renderTarget, glRenderTarget);\n\n        if (renderTarget.stencil)\n        {\n            this._resizeStencil(glRenderTarget);\n        }\n    }\n\n    private _initColor(renderTarget: RenderTarget, glRenderTarget: GlRenderTarget)\n    {\n        const renderer = this._renderer;\n\n        const gl = renderer.gl;\n        // deal with our outputs..\n        const resolveTargetFramebuffer = gl.createFramebuffer();\n\n        glRenderTarget.resolveTargetFramebuffer = resolveTargetFramebuffer;\n\n        // set up the texture..\n        gl.bindFramebuffer(gl.FRAMEBUFFER, resolveTargetFramebuffer);\n\n        glRenderTarget.width = renderTarget.colorTexture.source.pixelWidth;\n        glRenderTarget.height = renderTarget.colorTexture.source.pixelHeight;\n\n        renderTarget.colorTextures.forEach((colorTexture, i) =>\n        {\n            const source = colorTexture.source;\n\n            if (source.antialias)\n            {\n                if (renderer.context.supports.msaa)\n                {\n                    glRenderTarget.msaa = true;\n                }\n                else\n                {\n                    warn('[RenderTexture] Antialiasing on textures is not supported in WebGL1');\n                }\n            }\n\n            // TODO bindSource could return the glTexture\n            renderer.texture.bindSource(source, 0);\n            const glSource = renderer.texture.getGlSource(source);\n\n            const glTexture = glSource.texture;\n\n            gl.framebufferTexture2D(gl.FRAMEBUFFER,\n                gl.COLOR_ATTACHMENT0 + i,\n                3553, // texture.target,\n                glTexture,\n                0);// mipLevel);\n        });\n\n        if (glRenderTarget.msaa)\n        {\n            const viewFramebuffer = gl.createFramebuffer();\n\n            glRenderTarget.framebuffer = viewFramebuffer;\n\n            gl.bindFramebuffer(gl.FRAMEBUFFER, viewFramebuffer);\n\n            renderTarget.colorTextures.forEach((_, i) =>\n            {\n                const msaaRenderBuffer = gl.createRenderbuffer();\n\n                glRenderTarget.msaaRenderBuffer[i] = msaaRenderBuffer;\n            });\n        }\n        else\n        {\n            glRenderTarget.framebuffer = resolveTargetFramebuffer;\n        }\n\n        this._resizeColor(renderTarget, glRenderTarget);\n    }\n\n    private _resizeColor(renderTarget: RenderTarget, glRenderTarget: GlRenderTarget)\n    {\n        const source = renderTarget.colorTexture.source;\n\n        glRenderTarget.width = source.pixelWidth;\n        glRenderTarget.height = source.pixelHeight;\n\n        renderTarget.colorTextures.forEach((colorTexture, i) =>\n        {\n            // nno need to resize the first texture..\n            if (i === 0) return;\n\n            colorTexture.source.resize(source.width, source.height, source._resolution);\n        });\n\n        if (glRenderTarget.msaa)\n        {\n            const renderer = this._renderer;\n            const gl = renderer.gl;\n\n            const viewFramebuffer = glRenderTarget.framebuffer;\n\n            gl.bindFramebuffer(gl.FRAMEBUFFER, viewFramebuffer);\n\n            renderTarget.colorTextures.forEach((colorTexture, i) =>\n            {\n                const source = colorTexture.source;\n\n                renderer.texture.bindSource(source, 0);\n                const glSource = renderer.texture.getGlSource(source);\n\n                const glInternalFormat = glSource.internalFormat;\n\n                const msaaRenderBuffer = glRenderTarget.msaaRenderBuffer[i];\n\n                gl.bindRenderbuffer(\n                    gl.RENDERBUFFER,\n                    msaaRenderBuffer\n                );\n\n                gl.renderbufferStorageMultisample(\n                    gl.RENDERBUFFER,\n                    4,\n                    glInternalFormat,\n                    source.pixelWidth,\n                    source.pixelHeight\n                );\n\n                gl.framebufferRenderbuffer(\n                    gl.FRAMEBUFFER,\n                    gl.COLOR_ATTACHMENT0 + i,\n                    gl.RENDERBUFFER,\n                    msaaRenderBuffer\n                );\n            });\n        }\n    }\n\n    private _initStencil(glRenderTarget: GlRenderTarget)\n    {\n        // this already exists on the default screen\n        if (glRenderTarget.framebuffer === null) return;\n\n        const gl = this._renderer.gl;\n\n        const depthStencilRenderBuffer = gl.createRenderbuffer();\n\n        glRenderTarget.depthStencilRenderBuffer = depthStencilRenderBuffer;\n\n        gl.bindRenderbuffer(\n            gl.RENDERBUFFER,\n            depthStencilRenderBuffer\n        );\n\n        gl.framebufferRenderbuffer(\n            gl.FRAMEBUFFER,\n            gl.DEPTH_STENCIL_ATTACHMENT,\n            gl.RENDERBUFFER,\n            depthStencilRenderBuffer\n        );\n\n        // TDO DO>>\n        this._resizeStencil(glRenderTarget);\n    }\n\n    private _resizeStencil(glRenderTarget: GlRenderTarget)\n    {\n        const gl = this._renderer.gl;\n\n        gl.bindRenderbuffer(\n            gl.RENDERBUFFER,\n            glRenderTarget.depthStencilRenderBuffer\n        );\n\n        if (glRenderTarget.msaa)\n        {\n            gl.renderbufferStorageMultisample(\n                gl.RENDERBUFFER,\n                4,\n                gl.DEPTH24_STENCIL8,\n                glRenderTarget.width,\n                glRenderTarget.height\n            );\n        }\n        else\n        {\n            gl.renderbufferStorage(\n                gl.RENDERBUFFER,\n                this._renderer.context.webGLVersion === 2\n                    ? gl.DEPTH24_STENCIL8\n                    : gl.DEPTH_STENCIL,\n                glRenderTarget.width,\n                glRenderTarget.height\n            );\n        }\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { compileHighShaderGlProgram } from '../../high-shader/compileHighShaderToProgram';\nimport { colorBitGl } from '../../high-shader/shader-bits/colorBit';\nimport { generateTextureBatchBitGl } from '../../high-shader/shader-bits/generateTextureBatchBit';\nimport { roundPixelsBitGl } from '../../high-shader/shader-bits/roundPixelsBit';\nimport { batchSamplersUniformGroup } from '../../renderers/gl/shader/batchSamplersUniformGroup';\nimport { Shader } from '../../renderers/shared/shader/Shader';\nimport { State } from '../../renderers/shared/state/State';\nimport { MAX_TEXTURES } from '../shared/const';\n\nimport type { WebGLRenderer } from '../../renderers/gl/WebGLRenderer';\nimport type { Geometry } from '../../renderers/shared/geometry/Geometry';\nimport type { Batch } from '../shared/Batcher';\nimport type { BatcherAdaptor, BatcherPipe } from '../shared/BatcherPipe';\n\n/**\n * A BatcherAdaptor that uses WebGL to render batches.\n * @memberof rendering\n * @ignore\n */\nexport class GlBatchAdaptor implements BatcherAdaptor\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipesAdaptor,\n        ],\n        name: 'batch',\n    } as const;\n\n    private _shader: Shader;\n    private _didUpload = false;\n    private readonly _tempState = State.for2d();\n\n    public init(batcherPipe: BatcherPipe): void\n    {\n        const glProgram = compileHighShaderGlProgram({\n            name: 'batch',\n            bits: [\n                colorBitGl,\n                generateTextureBatchBitGl(MAX_TEXTURES),\n                roundPixelsBitGl,\n            ]\n        });\n\n        this._shader = new Shader({\n            glProgram,\n            resources: {\n                batchSamplers: batchSamplersUniformGroup,\n            }\n        });\n\n        batcherPipe.renderer.runners.contextChange.add(this);\n    }\n\n    public contextChange(): void\n    {\n        this._didUpload = false;\n    }\n\n    public start(batchPipe: BatcherPipe, geometry: Geometry): void\n    {\n        const renderer = batchPipe.renderer as WebGLRenderer;\n\n        renderer.shader.bind(this._shader, this._didUpload);\n\n        renderer.shader.updateUniformGroup(renderer.globalUniforms.uniformGroup);\n\n        renderer.geometry.bind(geometry, this._shader.glProgram);\n    }\n\n    public execute(batchPipe: BatcherPipe, batch: Batch): void\n    {\n        const renderer = batchPipe.renderer as WebGLRenderer;\n\n        this._didUpload = true;\n\n        this._tempState.blendMode = batch.blendMode;\n\n        renderer.state.set(this._tempState);\n\n        const textures = batch.textures.textures;\n\n        for (let i = 0; i < textures.length; i++)\n        {\n            renderer.texture.bind(textures[i], i);\n        }\n\n        renderer.geometry.draw('triangle-list', batch.size, batch.start);\n    }\n\n    public destroy(): void\n    {\n        this._shader.destroy(true);\n        this._shader = null;\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { getAttributeInfoFromFormat } from '../../shared/geometry/utils/getAttributeInfoFromFormat';\nimport { ensureAttributes } from '../shader/program/ensureAttributes';\nimport { getGlTypeFromFormat } from './utils/getGlTypeFromFormat';\n\nimport type { Topology } from '../../shared/geometry/const';\nimport type { Geometry } from '../../shared/geometry/Geometry';\nimport type { System } from '../../shared/system/System';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\nimport type { GlProgram } from '../shader/GlProgram';\nimport type { WebGLRenderer } from '../WebGLRenderer';\n\nconst topologyToGlMap = {\n    'point-list': 0x0000,\n    'line-list': 0x0001,\n    'line-strip': 0x0003,\n    'triangle-list': 0x0004,\n    'triangle-strip': 0x0005\n};\n\n/**\n * System plugin to the renderer to manage geometry.\n * @memberof rendering\n */\nexport class GlGeometrySystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'geometry',\n    } as const;\n\n    /**\n     * `true` if we has `*_vertex_array_object` extension.\n     * @readonly\n     */\n    public hasVao: boolean;\n\n    /**\n     * `true` if has `ANGLE_instanced_arrays` extension.\n     * @readonly\n     */\n    public hasInstance: boolean;\n\n    protected gl: GlRenderingContext;\n    protected _activeGeometry: Geometry;\n    protected _activeVao: WebGLVertexArrayObject;\n\n    protected _geometryVaoHash: Record<number, Record<string, WebGLVertexArrayObject>> = Object.create(null);\n\n    /** Renderer that owns this {@link GeometrySystem}. */\n    private _renderer: WebGLRenderer;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n        this._activeGeometry = null;\n        this._activeVao = null;\n\n        this.hasVao = true;\n        this.hasInstance = true;\n    }\n\n    /** Sets up the renderer context and necessary buffers. */\n    protected contextChange(): void\n    {\n        const gl = this.gl = this._renderer.gl;\n\n        if (!this._renderer.context.supports.vertexArrayObject)\n        {\n            throw new Error('[PixiJS] Vertex Array Objects are not supported on this device');\n        }\n\n        const nativeVaoExtension = this._renderer.context.extensions.vertexArrayObject;\n\n        if (nativeVaoExtension)\n        {\n            gl.createVertexArray = (): WebGLVertexArrayObject =>\n                nativeVaoExtension.createVertexArrayOES();\n\n            gl.bindVertexArray = (vao): void =>\n                nativeVaoExtension.bindVertexArrayOES(vao);\n\n            gl.deleteVertexArray = (vao): void =>\n                nativeVaoExtension.deleteVertexArrayOES(vao);\n        }\n\n        const nativeInstancedExtension = this._renderer.context.extensions.vertexAttribDivisorANGLE;\n\n        if (nativeInstancedExtension)\n        {\n            gl.drawArraysInstanced = (a, b, c, d): void =>\n            {\n                nativeInstancedExtension.drawArraysInstancedANGLE(a, b, c, d);\n            };\n\n            gl.drawElementsInstanced = (a, b, c, d, e): void =>\n            {\n                nativeInstancedExtension.drawElementsInstancedANGLE(a, b, c, d, e);\n            };\n\n            gl.vertexAttribDivisor = (a, b): void =>\n                nativeInstancedExtension.vertexAttribDivisorANGLE(a, b);\n        }\n\n        this._activeGeometry = null;\n        this._activeVao = null;\n        this._geometryVaoHash = Object.create(null);\n    }\n\n    /**\n     * Binds geometry so that is can be drawn. Creating a Vao if required\n     * @param geometry - Instance of geometry to bind.\n     * @param program - Instance of program to use vao for.\n     */\n    public bind(geometry?: Geometry, program?: GlProgram): void\n    {\n        // shader = shader || this.renderer.shader.shader;\n\n        const gl = this.gl;\n\n        this._activeGeometry = geometry;\n\n        const vao = this.getVao(geometry, program);\n\n        if (this._activeVao !== vao)\n        {\n            this._activeVao = vao;\n\n            gl.bindVertexArray(vao);\n        }\n\n        this.updateBuffers();\n    }\n\n    /** Reset and unbind any active VAO and geometry. */\n    public reset(): void\n    {\n        this.unbind();\n    }\n\n    /** Update buffers of the currently bound geometry. */\n    public updateBuffers(): void\n    {\n        const geometry = this._activeGeometry;\n\n        const bufferSystem = this._renderer.buffer;\n\n        for (let i = 0; i < geometry.buffers.length; i++)\n        {\n            const buffer = geometry.buffers[i];\n\n            bufferSystem.updateBuffer(buffer);\n        }\n    }\n\n    /**\n     * Check compatibility between a geometry and a program\n     * @param geometry - Geometry instance.\n     * @param program - Program instance.\n     */\n    protected checkCompatibility(geometry: Geometry, program: GlProgram): void\n    {\n        // geometry must have at least all the attributes that the shader requires.\n        const geometryAttributes = geometry.attributes;\n        const shaderAttributes = program._attributeData;\n\n        for (const j in shaderAttributes)\n        {\n            if (!geometryAttributes[j])\n            {\n                throw new Error(`shader and geometry incompatible, geometry missing the \"${j}\" attribute`);\n            }\n        }\n    }\n\n    /**\n     * Takes a geometry and program and generates a unique signature for them.\n     * @param geometry - To get signature from.\n     * @param program - To test geometry against.\n     * @returns - Unique signature of the geometry and program\n     */\n    protected getSignature(geometry: Geometry, program: GlProgram): string\n    {\n        const attribs = geometry.attributes;\n        const shaderAttributes = program._attributeData;\n\n        const strings = ['g', geometry.uid];\n\n        for (const i in attribs)\n        {\n            if (shaderAttributes[i])\n            {\n                strings.push(i, shaderAttributes[i].location);\n            }\n        }\n\n        return strings.join('-');\n    }\n\n    protected getVao(geometry: Geometry, program: GlProgram): WebGLVertexArrayObject\n    {\n        return this._geometryVaoHash[geometry.uid]?.[program._key] || this.initGeometryVao(geometry, program);\n    }\n\n    /**\n     * Creates or gets Vao with the same structure as the geometry and stores it on the geometry.\n     * If vao is created, it is bound automatically. We use a shader to infer what and how to set up the\n     * attribute locations.\n     * @param geometry - Instance of geometry to to generate Vao for.\n     * @param program\n     * @param _incRefCount - Increment refCount of all geometry buffers.\n     */\n    protected initGeometryVao(geometry: Geometry, program: GlProgram, _incRefCount = true): WebGLVertexArrayObject\n    {\n        const gl = this._renderer.gl;\n        // const CONTEXT_UID = this.CONTEXT_UID;\n        const bufferSystem = this._renderer.buffer;\n\n        this._renderer.shader._getProgramData(program);\n\n        this.checkCompatibility(geometry, program);\n\n        const signature = this.getSignature(geometry, program);\n\n        if (!this._geometryVaoHash[geometry.uid])\n        {\n            this._geometryVaoHash[geometry.uid] = Object.create(null);\n\n            geometry.on('destroy', this.onGeometryDestroy, this);\n        }\n\n        const vaoObjectHash = this._geometryVaoHash[geometry.uid];\n\n        let vao = vaoObjectHash[signature];\n\n        if (vao)\n        {\n            // this will give us easy access to the vao\n            vaoObjectHash[program._key] = vao;\n\n            return vao;\n        }\n\n        ensureAttributes(geometry, program._attributeData);\n\n        const buffers = geometry.buffers;\n\n        // @TODO: We don't know if VAO is supported.\n        vao = gl.createVertexArray();\n\n        gl.bindVertexArray(vao);\n\n        // first update - and create the buffers!\n        // only create a gl buffer if it actually gets\n        for (let i = 0; i < buffers.length; i++)\n        {\n            const buffer = buffers[i];\n\n            bufferSystem.bind(buffer);\n        }\n\n        // TODO - maybe make this a data object?\n        // lets wait to see if we need to first!\n\n        this.activateVao(geometry, program);\n\n        // add it to the cache!\n        vaoObjectHash[program._key] = vao;\n        vaoObjectHash[signature] = vao;\n\n        gl.bindVertexArray(null);\n\n        return vao;\n    }\n\n    /**\n     * Disposes geometry.\n     * @param geometry - Geometry with buffers. Only VAO will be disposed\n     * @param [contextLost=false] - If context was lost, we suppress deleteVertexArray\n     */\n    protected onGeometryDestroy(geometry: Geometry, contextLost?: boolean): void\n    {\n        const vaoObjectHash = this._geometryVaoHash[geometry.uid];\n\n        const gl = this.gl;\n\n        if (vaoObjectHash)\n        {\n            if (contextLost)\n            {\n                for (const i in vaoObjectHash)\n                {\n                    if (this._activeVao !== vaoObjectHash[i])\n                    {\n                        this.unbind();\n                    }\n\n                    gl.deleteVertexArray(vaoObjectHash[i]);\n                }\n            }\n\n            this._geometryVaoHash[geometry.uid] = null;\n        }\n    }\n\n    /**\n     * Dispose all WebGL resources of all managed geometries.\n     * @param [contextLost=false] - If context was lost, we suppress `gl.delete` calls\n     */\n    public destroyAll(contextLost = false): void\n    {\n        const gl = this.gl;\n\n        for (const i in this._geometryVaoHash)\n        {\n            if (contextLost)\n            {\n                for (const j in this._geometryVaoHash[i])\n                {\n                    const vaoObjectHash = this._geometryVaoHash[i];\n\n                    if (this._activeVao !== vaoObjectHash)\n                    {\n                        this.unbind();\n                    }\n\n                    gl.deleteVertexArray(vaoObjectHash[j]);\n                }\n            }\n\n            this._geometryVaoHash[i] = null;\n        }\n    }\n\n    /**\n     * Activate vertex array object.\n     * @param geometry - Geometry instance.\n     * @param program - Shader program instance.\n     */\n    protected activateVao(geometry: Geometry, program: GlProgram): void\n    {\n        const gl = this._renderer.gl;\n\n        const bufferSystem = this._renderer.buffer;\n        const attributes = geometry.attributes;\n\n        if (geometry.indexBuffer)\n        {\n            // first update the index buffer if we have one..\n            bufferSystem.bind(geometry.indexBuffer);\n        }\n\n        let lastBuffer = null;\n\n        // add a new one!\n        for (const j in attributes)\n        {\n            const attribute = attributes[j];\n            const buffer = attribute.buffer;\n            const glBuffer = bufferSystem.getGlBuffer(buffer);\n            const programAttrib = program._attributeData[j];\n\n            if (programAttrib)\n            {\n                if (lastBuffer !== glBuffer)\n                {\n                    bufferSystem.bind(buffer);\n\n                    lastBuffer = glBuffer;\n                }\n\n                const location = attribute.location;\n\n                // TODO introduce state again\n                // we can optimise this for older devices that have no VAOs\n                gl.enableVertexAttribArray(location);\n\n                const attributeInfo = getAttributeInfoFromFormat(attribute.format);\n\n                const type = getGlTypeFromFormat(attribute.format);\n\n                if (programAttrib.format?.substring(1, 4) === 'int')\n                {\n                    gl.vertexAttribIPointer(location,\n                        attributeInfo.size,\n                        type,\n                        attribute.stride,\n                        attribute.offset);\n                }\n                else\n                {\n                    gl.vertexAttribPointer(location,\n                        attributeInfo.size,\n                        type,\n                        attributeInfo.normalised,\n                        attribute.stride,\n                        attribute.offset);\n                }\n\n                if (attribute.instance)\n                {\n                    // TODO calculate instance count based of this...\n                    if (this.hasInstance)\n                    {\n                        gl.vertexAttribDivisor(location, 1);// attribute.divisor);\n                    }\n                    else\n                    {\n                        throw new Error('geometry error, GPU Instancing is not supported on this device');\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Draws the currently bound geometry.\n     * @param topology - The type primitive to render.\n     * @param size - The number of elements to be rendered. If not specified, all vertices after the\n     *  starting vertex will be drawn.\n     * @param start - The starting vertex in the geometry to start drawing from. If not specified,\n     *  drawing will start from the first vertex.\n     * @param instanceCount - The number of instances of the set of elements to execute. If not specified,\n     *  all instances will be drawn.\n     */\n    public draw(topology?: Topology, size?: number, start?: number, instanceCount?: number): this\n    {\n        const { gl } = this._renderer;\n        const geometry = this._activeGeometry;\n\n        const glTopology = topologyToGlMap[geometry.topology || topology];\n\n        instanceCount ||= geometry.instanceCount;\n\n        if (geometry.indexBuffer)\n        {\n            const byteSize = geometry.indexBuffer.data.BYTES_PER_ELEMENT;\n            const glType = byteSize === 2 ? gl.UNSIGNED_SHORT : gl.UNSIGNED_INT;\n\n            if (instanceCount > 1)\n            {\n                /* eslint-disable max-len */\n                gl.drawElementsInstanced(glTopology, size || geometry.indexBuffer.data.length, glType, (start || 0) * byteSize, instanceCount);\n                /* eslint-enable max-len */\n            }\n            else\n            {\n                /* eslint-disable max-len */\n                gl.drawElements(glTopology, size || geometry.indexBuffer.data.length, glType, (start || 0) * byteSize);\n                /* eslint-enable max-len */\n            }\n        }\n        else if (instanceCount > 1)\n        {\n            // TODO need a better way to calculate size..\n            gl.drawArraysInstanced(glTopology, start || 0, size || geometry.getSize(), instanceCount);\n        }\n        else\n        {\n            gl.drawArrays(glTopology, start || 0, size || geometry.getSize());\n        }\n\n        return this;\n    }\n\n    /** Unbind/reset everything. */\n    protected unbind(): void\n    {\n        this.gl.bindVertexArray(null);\n        this._activeVao = null;\n        this._activeGeometry = null;\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null;\n        this.gl = null;\n        this._activeVao = null;\n        this._activeGeometry = null;\n    }\n}\n","import { WGSL_TO_STD40_SIZE } from './createUboElementsSTD40';\n\nimport type { UboElement } from '../../../shared/shader/types';\n\n/**\n * This generates a function that will sync an array to the uniform buffer\n * following the std140 layout\n * @param uboElement - the element to generate the array sync for\n * @param offsetToAdd - the offset to append at the start of the code\n * @returns - the generated code\n */\nexport function generateArraySyncSTD40(uboElement: UboElement, offsetToAdd: number): string\n{\n    const rowSize = Math.max(WGSL_TO_STD40_SIZE[uboElement.data.type] / 16, 1);\n    const elementSize = (uboElement.data.value as Array<number>).length / uboElement.data.size;// size / rowSize;\n\n    const remainder = (4 - (elementSize % 4)) % 4;\n\n    return `\n        v = uv.${uboElement.data.name};\n        offset += ${offsetToAdd};\n\n        arrayOffset = offset;\n\n        t = 0;\n\n        for(var i=0; i < ${uboElement.data.size * rowSize}; i++)\n        {\n            for(var j = 0; j < ${elementSize}; j++)\n            {\n                data[arrayOffset++] = v[t++];\n            }\n            ${remainder !== 0 ? `arrayOffset += ${remainder};` : ''}\n        }\n    `;\n}\n","/**\n * will log a shader error highlighting the lines with the error\n * also will add numbers along the side.\n * @param gl - the WebGLContext\n * @param shader - the shader to log errors for\n */\nfunction logPrettyShaderError(gl: WebGLRenderingContext, shader: WebGLShader): void\n{\n    const shaderSrc = gl.getShaderSource(shader)\n        .split('\\n')\n        .map((line, index) => `${index}: ${line}`);\n\n    const shaderLog = gl.getShaderInfoLog(shader);\n    const splitShader = shaderLog.split('\\n');\n\n    const dedupe: Record<number, boolean> = {};\n\n    const lineNumbers = splitShader.map((line) => parseFloat(line.replace(/^ERROR\\: 0\\:([\\d]+)\\:.*$/, '$1')))\n        .filter((n) =>\n        {\n            if (n && !dedupe[n])\n            {\n                dedupe[n] = true;\n\n                return true;\n            }\n\n            return false;\n        });\n\n    const logArgs = [''];\n\n    lineNumbers.forEach((number) =>\n    {\n        shaderSrc[number - 1] = `%c${shaderSrc[number - 1]}%c`;\n        logArgs.push('background: #FF0000; color:#FFFFFF; font-size: 10px', 'font-size: 10px');\n    });\n\n    const fragmentSourceToLog = shaderSrc\n        .join('\\n');\n\n    logArgs[0] = fragmentSourceToLog;\n\n    console.error(shaderLog);\n\n    // eslint-disable-next-line no-console\n    console.groupCollapsed('click to view full shader code');\n    console.warn(...logArgs);\n    // eslint-disable-next-line no-console\n    console.groupEnd();\n}\n\n/**\n *\n * logs out any program errors\n * @param gl - The current WebGL context\n * @param program - the WebGL program to display errors for\n * @param vertexShader  - the fragment WebGL shader program\n * @param fragmentShader - the vertex WebGL shader program\n * @private\n */\nexport function logProgramError(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram,\n    vertexShader: WebGLShader,\n    fragmentShader: WebGLShader\n): void\n{\n    // if linking fails, then log and cleanup\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS))\n    {\n        if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS))\n        {\n            logPrettyShaderError(gl, vertexShader);\n        }\n\n        if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS))\n        {\n            logPrettyShaderError(gl, fragmentShader);\n        }\n\n        console.error('PixiJS Error: Could not initialize shader.');\n\n        // if there is a program info log, log it\n        if (gl.getProgramInfoLog(program) !== '')\n        {\n            console.warn('PixiJS Warning: gl.getProgramInfoLog()', gl.getProgramInfoLog(program));\n        }\n    }\n}\n","import type { GlRenderingContext } from '../../context/GlRenderingContext';\n\n/**\n * Returns a lookup table that maps each type-format pair to a compatible internal format.\n * @function mapTypeAndFormatToInternalFormat\n * @private\n * @param {WebGLRenderingContext} gl - The rendering context.\n * @returns Lookup table.\n */\nexport function mapFormatToGlFormat(gl: GlRenderingContext): Record<string, number>\n{\n    return {\n        // 8-bit formats\n        r8unorm: gl.RED,\n        r8snorm: gl.RED,\n        r8uint: gl.RED,\n        r8sint: gl.RED,\n\n        // 16-bit formats\n        r16uint: gl.RED,\n        r16sint:    gl.RED,\n        r16float: gl.RED,\n        rg8unorm:  gl.RG,\n        rg8snorm:   gl.RG,\n        rg8uint:  gl.RG,\n        rg8sint:  gl.RG,\n\n        // 32-bit formats\n        r32uint: gl.RED,\n        r32sint: gl.RED,\n        r32float: gl.RED,\n        rg16uint:   gl.RG,\n        rg16sint:  gl.RG,\n        rg16float:  gl.RG,\n        rgba8unorm: gl.RGBA,\n        'rgba8unorm-srgb': gl.RGBA,\n\n        // Packed 32-bit formats\n        rgba8snorm: gl.RGBA,\n        rgba8uint: gl.RGBA,\n        rgba8sint: gl.RGBA,\n        bgra8unorm: gl.RGBA,\n        'bgra8unorm-srgb': gl.RGBA,\n        rgb9e5ufloat: gl.RGB,\n        rgb10a2unorm: gl.RGBA,\n        rg11b10ufloat: gl.RGB,\n\n        // 64-bit formats\n        rg32uint: gl.RG,\n        rg32sint: gl.RG,\n        rg32float:  gl.RG,\n        rgba16uint: gl.RGBA,\n        rgba16sint: gl.RGBA,\n        rgba16float: gl.RGBA,\n\n        // 128-bit formats\n        rgba32uint: gl.RGBA,\n        rgba32sint: gl.RGBA,\n        rgba32float: gl.RGBA,\n\n        // Depth/stencil formats\n        stencil8: gl.STENCIL_INDEX8,\n        depth16unorm: gl.DEPTH_COMPONENT,\n        depth24plus: gl.DEPTH_COMPONENT,\n        'depth24plus-stencil8': gl.DEPTH_STENCIL,\n        depth32float: gl.DEPTH_COMPONENT,\n        'depth32float-stencil8': gl.DEPTH_STENCIL,\n\n    };\n}\n","import type { GlRenderingContext } from '../../context/GlRenderingContext';\n\n/**\n * Returns a lookup table that maps each type-format pair to a compatible internal format.\n * @function mapTypeAndFormatToInternalFormat\n * @private\n * @param {WebGLRenderingContext} gl - The rendering context.\n * @returns Lookup table.\n */\nexport function mapFormatToGlType(gl: GlRenderingContext): Record<string, number>\n{\n    return {\n        // 8-bit formats\n        r8unorm: gl.UNSIGNED_BYTE,\n        r8snorm: gl.BYTE,\n        r8uint: gl.UNSIGNED_BYTE,\n        r8sint: gl.BYTE,\n\n        // 16-bit formats\n        r16uint: gl.UNSIGNED_SHORT,\n        r16sint: gl.SHORT,\n        r16float: gl.HALF_FLOAT,\n        rg8unorm: gl.UNSIGNED_BYTE,\n        rg8snorm: gl.BYTE,\n        rg8uint: gl.UNSIGNED_BYTE,\n        rg8sint: gl.BYTE,\n\n        // 32-bit formats\n        r32uint: gl.UNSIGNED_INT,\n        r32sint: gl.INT,\n        r32float: gl.FLOAT,\n        rg16uint: gl.UNSIGNED_SHORT,\n        rg16sint: gl.SHORT,\n        rg16float: gl.HALF_FLOAT,\n        rgba8unorm: gl.UNSIGNED_BYTE,\n        'rgba8unorm-srgb': gl.UNSIGNED_BYTE,\n\n        // Packed 32-bit formats\n        rgba8snorm: gl.BYTE,\n        rgba8uint: gl.UNSIGNED_BYTE,\n        rgba8sint: gl.BYTE,\n        bgra8unorm: gl.UNSIGNED_BYTE,\n        'bgra8unorm-srgb': gl.UNSIGNED_BYTE,\n        rgb9e5ufloat: gl.UNSIGNED_INT_5_9_9_9_REV,\n        rgb10a2unorm: gl.UNSIGNED_INT_2_10_10_10_REV,\n        rg11b10ufloat: gl.UNSIGNED_INT_10F_11F_11F_REV,\n\n        // 64-bit formats\n        rg32uint: gl.UNSIGNED_INT,\n        rg32sint: gl.INT,\n        rg32float: gl.FLOAT,\n        rgba16uint: gl.UNSIGNED_SHORT,\n        rgba16sint: gl.SHORT,\n        rgba16float: gl.HALF_FLOAT,\n\n        // 128-bit formats\n        rgba32uint: gl.UNSIGNED_INT,\n        rgba32sint: gl.INT,\n        rgba32float: gl.FLOAT,\n\n        // Depth/stencil formats\n        stencil8: gl.UNSIGNED_BYTE,\n        depth16unorm: gl.UNSIGNED_SHORT,\n        depth24plus: gl.UNSIGNED_INT,\n        'depth24plus-stencil8': gl.UNSIGNED_INT_24_8,\n        depth32float: gl.FLOAT,\n        'depth32float-stencil8': gl.FLOAT_32_UNSIGNED_INT_24_8_REV,\n\n    };\n}\n","import { GL_TYPES } from '../../texture/const';\n\nimport type { VertexFormat } from '../../../shared/geometry/const';\n\nconst infoMap = {\n    uint8x2: GL_TYPES.UNSIGNED_BYTE,\n    uint8x4: GL_TYPES.UNSIGNED_BYTE,\n    sint8x2: GL_TYPES.BYTE,\n    sint8x4: GL_TYPES.BYTE,\n    unorm8x2: GL_TYPES.UNSIGNED_BYTE,\n    unorm8x4: GL_TYPES.UNSIGNED_BYTE,\n    snorm8x2: GL_TYPES.BYTE,\n    snorm8x4: GL_TYPES.BYTE,\n    uint16x2: GL_TYPES.UNSIGNED_SHORT,\n    uint16x4: GL_TYPES.UNSIGNED_SHORT,\n    sint16x2: GL_TYPES.SHORT,\n    sint16x4: GL_TYPES.SHORT,\n    unorm16x2: GL_TYPES.UNSIGNED_SHORT,\n    unorm16x4: GL_TYPES.UNSIGNED_SHORT,\n    snorm16x2: GL_TYPES.SHORT,\n    snorm16x4: GL_TYPES.SHORT,\n    float16x2: GL_TYPES.HALF_FLOAT,\n    float16x4: GL_TYPES.HALF_FLOAT,\n    float32: GL_TYPES.FLOAT,\n    float32x2: GL_TYPES.FLOAT,\n    float32x3: GL_TYPES.FLOAT,\n    float32x4: GL_TYPES.FLOAT,\n    uint32: GL_TYPES.UNSIGNED_INT,\n    uint32x2: GL_TYPES.UNSIGNED_INT,\n    uint32x3: GL_TYPES.UNSIGNED_INT,\n    uint32x4: GL_TYPES.UNSIGNED_INT,\n    sint32: GL_TYPES.INT,\n    sint32x2: GL_TYPES.INT,\n    sint32x3: GL_TYPES.INT,\n    sint32x4: GL_TYPES.INT\n};\n\nexport function getGlTypeFromFormat(format: VertexFormat): number\n{\n    return infoMap[format] ?? infoMap.float32;\n}\n","/**\n * @private\n * @param {WebGLRenderingContext} gl - The current WebGL context {WebGLProgram}\n * @param {number} type - the type, can be either VERTEX_SHADER or FRAGMENT_SHADER\n * @param {string} src - The vertex shader source as an array of strings.\n * @returns {WebGLShader} the shader\n */\nexport function compileShader(gl: WebGLRenderingContextBase, type: number, src: string): WebGLShader\n{\n    const shader = gl.createShader(type);\n\n    gl.shaderSource(shader, src);\n    gl.compileShader(shader);\n\n    return shader;\n}\n","import type { GlUniformBlockData } from '../GlProgram';\n\n/**\n * returns the uniform block data from the program\n * @private\n * @param program - the webgl program\n * @param gl - the WebGL context\n * @returns {object} the uniform data for this program\n */\nexport function getUboData(program: WebGLProgram, gl: WebGL2RenderingContext): Record<string, GlUniformBlockData>\n{\n    // if uniform buffer data is not supported, early out\n    if (!gl.ACTIVE_UNIFORM_BLOCKS) return {};\n\n    const uniformBlocks: Record<string, GlUniformBlockData> = {};\n\n    // const totalUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n    const totalUniformsBlocks = gl.getProgramParameter(program, gl.ACTIVE_UNIFORM_BLOCKS);\n\n    for (let i = 0; i < totalUniformsBlocks; i++)\n    {\n        const name = gl.getActiveUniformBlockName(program, i);\n        const uniformBlockIndex = gl.getUniformBlockIndex(program, name);\n\n        const size = gl.getActiveUniformBlockParameter(program, i, gl.UNIFORM_BLOCK_DATA_SIZE);\n\n        uniformBlocks[name] = {\n            name,\n            index: uniformBlockIndex,\n            size,\n        };\n    }\n\n    return uniformBlocks;\n}\n","import type { BUFFER_TYPE } from './const';\n\nexport class GlBuffer\n{\n    public buffer: WebGLBuffer;\n    public updateID: number;\n    public byteLength: number;\n    public type: number;\n\n    constructor(buffer: WebGLBuffer, type: BUFFER_TYPE)\n    {\n        this.buffer = buffer || null;\n        this.updateID = -1;\n        this.byteLength = -1;\n        this.type = type;\n    }\n}\n","export const scaleModeToGlFilter = {\n    linear: 9729,\n    nearest: 9728,\n};\n\nexport const mipmapScaleModeToGlFilter = {\n    linear: {\n        linear: 9987,\n        nearest: 9985,\n    },\n    nearest: {\n        linear: 9986,\n        nearest: 9984,\n    }\n};\n\nexport const wrapModeToGlAddress = {\n    'clamp-to-edge': 33071,\n    repeat: 10497,\n    'mirror-repeat': 33648,\n};\n\nexport const compareModeToGlCompare = {\n    never: 512,\n    less: 513,\n    equal: 514,\n    'less-equal': 515,\n    greater: 516,\n    'not-equal': 517,\n    'greater-equal': 518,\n    always: 519,\n};\n\n","/**\n * Constants for various buffer types in Pixi\n * @see BUFFER_TYPE\n * @name BUFFER_TYPE\n * @static\n * @enum {number}\n * @property {number} ELEMENT_ARRAY_BUFFER - buffer type for using as an index buffer\n * @property {number} ARRAY_BUFFER - buffer type for using attribute data\n * @property {number} UNIFORM_BUFFER - the buffer type is for uniform buffer objects\n */\nexport enum BUFFER_TYPE\n    // eslint-disable-next-line @typescript-eslint/indent\n {\n    ELEMENT_ARRAY_BUFFER = 34963,\n    ARRAY_BUFFER = 34962,\n    UNIFORM_BUFFER = 35345,\n}\n\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { generateShaderSyncCode } from './GenerateShaderSyncCode';\nimport { generateProgram } from './program/generateProgram';\n\nimport type { BufferResource } from '../../shared/buffer/BufferResource';\nimport type { Shader } from '../../shared/shader/Shader';\nimport type { UniformGroup } from '../../shared/shader/UniformGroup';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\nimport type { WebGLRenderer } from '../WebGLRenderer';\nimport type { GlProgram } from './GlProgram';\nimport type { GlProgramData } from './GlProgramData';\n\nexport interface ShaderSyncData\n{\n    textureCount: number;\n    blockIndex: number;\n}\n\nexport type ShaderSyncFunction = (renderer: WebGLRenderer, shader: Shader, syncData: ShaderSyncData) => void;\n\n// default sync data so we don't create a new one each time!\nconst defaultSyncData: ShaderSyncData = {\n    textureCount: 0,\n    blockIndex: 0,\n};\n\n/**\n * System plugin to the renderer to manage the shaders for WebGL.\n * @memberof rendering\n */\nexport class GlShaderSystem\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'shader',\n    } as const;\n\n    /**\n     * @internal\n     * @private\n     */\n    public _activeProgram: GlProgram = null;\n\n    private _programDataHash: Record<string, GlProgramData> = Object.create(null);\n    private readonly _renderer: WebGLRenderer;\n    public _gl: WebGL2RenderingContext;\n    private _maxBindings: number;\n    private _nextIndex = 0;\n    private _boundUniformsIdsToIndexHash: Record<number, number> = Object.create(null);\n    private _boundIndexToUniformsHash: Record<number, UniformGroup | BufferResource> = Object.create(null);\n    private _shaderSyncFunctions: Record<string, ShaderSyncFunction> = Object.create(null);\n\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    protected contextChange(gl: GlRenderingContext): void\n    {\n        this._gl = gl;\n\n        this._maxBindings = gl.MAX_UNIFORM_BUFFER_BINDINGS ? gl.getParameter(gl.MAX_UNIFORM_BUFFER_BINDINGS) : 0;\n\n        this._programDataHash = Object.create(null);\n        this._boundUniformsIdsToIndexHash = Object.create(null);\n        this._boundIndexToUniformsHash = Object.create(null);\n        this._activeProgram = null;\n    }\n\n    /**\n     * Changes the current shader to the one given in parameter.\n     * @param shader - the new shader\n     * @param skipSync - false if the shader should automatically sync its uniforms.\n     * @returns the glProgram that belongs to the shader.\n     */\n    public bind(shader: Shader, skipSync?: boolean): void\n    {\n        this._setProgram(shader.glProgram);\n\n        if (skipSync) return;\n\n        defaultSyncData.textureCount = 0;\n        defaultSyncData.blockIndex = 0;\n\n        let syncFunction = this._shaderSyncFunctions[shader.glProgram._key];\n\n        if (!syncFunction)\n        {\n            syncFunction = this._shaderSyncFunctions[shader.glProgram._key] = this._generateShaderSync(shader, this);\n        }\n\n        syncFunction(this._renderer, shader, defaultSyncData);\n    }\n\n    /**\n     * Updates the uniform group.\n     * @param uniformGroup - the uniform group to update\n     */\n    public updateUniformGroup(uniformGroup: UniformGroup): void\n    {\n        this._renderer.uniformGroup.updateUniformGroup(uniformGroup, this._activeProgram, defaultSyncData);\n    }\n\n    /**\n     * Binds a uniform block to the shader.\n     * @param uniformGroup - the uniform group to bind\n     * @param name - the name of the uniform block\n     * @param index - the index of the uniform block\n     */\n    public bindUniformBlock(uniformGroup: UniformGroup | BufferResource, name: string, index = 0): void\n    {\n        const bufferSystem = this._renderer.buffer;\n        const programData = this._getProgramData(this._activeProgram);\n\n        const isBufferResource = (uniformGroup as BufferResource)._bufferResource;\n\n        if (isBufferResource)\n        {\n            this._renderer.ubo.updateUniformGroup(uniformGroup as UniformGroup);\n        }\n\n        bufferSystem.updateBuffer(uniformGroup.buffer);\n\n        let boundIndex = this._boundUniformsIdsToIndexHash[uniformGroup.uid];\n\n        // check if it is already bound..\n        if (boundIndex === undefined)\n        {\n            const nextIndex = this._nextIndex++ % this._maxBindings;\n\n            const currentBoundUniformGroup = this._boundIndexToUniformsHash[nextIndex];\n\n            if (currentBoundUniformGroup)\n            {\n                this._boundUniformsIdsToIndexHash[currentBoundUniformGroup.uid] = undefined;\n            }\n\n            // find a free slot..\n            boundIndex = this._boundUniformsIdsToIndexHash[uniformGroup.uid] = nextIndex;\n            this._boundIndexToUniformsHash[nextIndex] = uniformGroup;\n\n            if (isBufferResource)\n            {\n                bufferSystem.bindBufferRange(uniformGroup.buffer, nextIndex, (uniformGroup as BufferResource).offset);\n            }\n            else\n            {\n                bufferSystem.bindBufferBase(uniformGroup.buffer, nextIndex);\n            }\n        }\n\n        const gl = this._gl;\n\n        const uniformBlockIndex = this._activeProgram._uniformBlockData[name].index;\n\n        if (programData.uniformBlockBindings[index] === boundIndex) return;\n        programData.uniformBlockBindings[index] = boundIndex;\n\n        gl.uniformBlockBinding(programData.program, uniformBlockIndex, boundIndex);\n    }\n\n    private _setProgram(program: GlProgram)\n    {\n        if (this._activeProgram === program) return;\n\n        this._activeProgram = program;\n\n        const programData = this._getProgramData(program);\n\n        this._gl.useProgram(programData.program);\n    }\n\n    /**\n     * @param program - the program to get the data for\n     * @internal\n     * @private\n     */\n    public _getProgramData(program: GlProgram): GlProgramData\n    {\n        return this._programDataHash[program._key] || this._createProgramData(program);\n    }\n\n    private _createProgramData(program: GlProgram): GlProgramData\n    {\n        const key = program._key;\n\n        this._programDataHash[key] = generateProgram(this._gl, program);\n\n        return this._programDataHash[key];\n    }\n\n    public destroy(): void\n    {\n        for (const key of Object.keys(this._programDataHash))\n        {\n            const programData = this._programDataHash[key];\n\n            programData.destroy();\n            this._programDataHash[key] = null;\n        }\n\n        this._programDataHash = null;\n        this._boundUniformsIdsToIndexHash = null;\n    }\n\n    /**\n     * Creates a function that can be executed that will sync the shader as efficiently as possible.\n     * Overridden by the unsafe eval package if you don't want eval used in your project.\n     * @param shader - the shader to generate the sync function for\n     * @param shaderSystem - the shader system to use\n     * @returns - the generated sync function\n     * @ignore\n     */\n    public _generateShaderSync(shader: Shader, shaderSystem: GlShaderSystem): ShaderSyncFunction\n    {\n        return generateShaderSyncCode(shader, shaderSystem);\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { BufferUsage } from '../../shared/buffer/const';\nimport { BUFFER_TYPE } from './const';\nimport { GlBuffer } from './GlBuffer';\n\nimport type { Buffer } from '../../shared/buffer/Buffer';\nimport type { System } from '../../shared/system/System';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\nimport type { WebGLRenderer } from '../WebGLRenderer';\n\n/**\n * System plugin to the renderer to manage buffers.\n *\n * WebGL uses Buffers as a way to store objects to the GPU.\n * This system makes working with them a lot easier.\n *\n * Buffers are used in three main places in WebGL\n * - geometry information\n * - Uniform information (via uniform buffer objects - a WebGL 2 only feature)\n * - Transform feedback information. (WebGL 2 only feature)\n *\n * This system will handle the binding of buffers to the GPU as well as uploading\n * them. With this system, you never need to work directly with GPU buffers, but instead work with\n * the Buffer class.\n * @class\n * @memberof rendering\n */\nexport class GlBufferSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'buffer',\n    } as const;\n\n    private _gl: GlRenderingContext;\n    private _gpuBuffers: {[key: number]: GlBuffer} = Object.create(null);\n\n    /** Cache keeping track of the base bound buffer bases */\n    private readonly _boundBufferBases: {[key: number]: Buffer} = Object.create(null);\n\n    private _renderer: WebGLRenderer;\n\n    /**\n     * @param {Renderer} renderer - The renderer this System works for.\n     */\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    /**\n     * @ignore\n     */\n    public destroy(): void\n    {\n        this._renderer = null;\n        this._gl = null;\n        this._gpuBuffers = null;\n        (this._boundBufferBases as null) = null;\n    }\n\n    /** Sets up the renderer context and necessary buffers. */\n    protected contextChange(): void\n    {\n        this._gpuBuffers = Object.create(null);\n        this._gl = this._renderer.gl;\n    }\n\n    public getGlBuffer(buffer: Buffer): GlBuffer\n    {\n        return this._gpuBuffers[buffer.uid] || this.createGLBuffer(buffer);\n    }\n\n    /**\n     * This binds specified buffer. On first run, it will create the webGL buffers for the context too\n     * @param buffer - the buffer to bind to the renderer\n     */\n    public bind(buffer: Buffer): void\n    {\n        const { _gl: gl } = this;\n\n        const glBuffer = this.getGlBuffer(buffer);\n\n        gl.bindBuffer(glBuffer.type, glBuffer.buffer);\n    }\n\n    /**\n     * Binds an uniform buffer to at the given index.\n     *\n     * A cache is used so a buffer will not be bound again if already bound.\n     * @param buffer - the buffer to bind\n     * @param index - the base index to bind it to.\n     */\n    public bindBufferBase(buffer: Buffer, index: number): void\n    {\n        const { _gl: gl } = this;\n\n        if (this._boundBufferBases[index] !== buffer)\n        {\n            const glBuffer = this.getGlBuffer(buffer);\n\n            this._boundBufferBases[index] = buffer;\n\n            gl.bindBufferBase(gl.UNIFORM_BUFFER, index, glBuffer.buffer);\n        }\n    }\n\n    /**\n     * Binds a buffer whilst also binding its range.\n     * This will make the buffer start from the offset supplied rather than 0 when it is read.\n     * @param buffer - the buffer to bind\n     * @param index - the base index to bind at, defaults to 0\n     * @param offset - the offset to bind at (this is blocks of 256). 0 = 0, 1 = 256, 2 = 512 etc\n     */\n    public bindBufferRange(buffer: Buffer, index?: number, offset?: number): void\n    {\n        const { _gl: gl } = this;\n\n        offset = offset || 0;\n\n        const glBuffer = this.getGlBuffer(buffer);\n\n        gl.bindBufferRange(gl.UNIFORM_BUFFER, index || 0, glBuffer.buffer, offset * 256, 256);\n    }\n\n    /**\n     * Will ensure the data in the buffer is uploaded to the GPU.\n     * @param {Buffer} buffer - the buffer to update\n     */\n    public updateBuffer(buffer: Buffer): GlBuffer\n    {\n        const { _gl: gl } = this;\n\n        const glBuffer = this.getGlBuffer(buffer);\n\n        if (buffer._updateID === glBuffer.updateID)\n        {\n            return glBuffer;\n        }\n\n        glBuffer.updateID = buffer._updateID;\n\n        gl.bindBuffer(glBuffer.type, glBuffer.buffer);\n\n        const data = buffer.data;\n\n        if (glBuffer.byteLength >= buffer.data.byteLength)\n        {\n            // assuming our buffers are aligned to 4 bits...\n            // offset is always zero for now!\n            gl.bufferSubData(glBuffer.type, 0, data, 0, buffer._updateSize / data.BYTES_PER_ELEMENT);\n        }\n        else\n        {\n            const drawType = (buffer.descriptor.usage & BufferUsage.STATIC) ? gl.STATIC_DRAW : gl.DYNAMIC_DRAW;\n\n            glBuffer.byteLength = data.byteLength;\n\n            // assuming our buffers are aligned to 4 bits...\n            gl.bufferData(glBuffer.type, data, drawType);\n        }\n\n        return glBuffer;\n    }\n\n    /** dispose all WebGL resources of all managed buffers */\n    public destroyAll(): void\n    {\n        const gl = this._gl;\n\n        for (const id in this._gpuBuffers)\n        {\n            gl.deleteBuffer(this._gpuBuffers[id].buffer);\n        }\n\n        this._gpuBuffers = Object.create(null);\n    }\n\n    /**\n     * Disposes buffer\n     * @param {Buffer} buffer - buffer with data\n     * @param {boolean} [contextLost=false] - If context was lost, we suppress deleteVertexArray\n     */\n    protected onBufferDestroy(buffer: Buffer, contextLost?: boolean): void\n    {\n        const glBuffer = this._gpuBuffers[buffer.uid];\n\n        const gl = this._gl;\n\n        if (!contextLost)\n        {\n            gl.deleteBuffer(glBuffer.buffer);\n        }\n\n        this._gpuBuffers[buffer.uid] = null;\n    }\n\n    /**\n     * creates and attaches a GLBuffer object tied to the current context.\n     * @param buffer\n     * @protected\n     */\n    protected createGLBuffer(buffer: Buffer): GlBuffer\n    {\n        const { _gl: gl } = this;\n\n        let type = BUFFER_TYPE.ARRAY_BUFFER;\n\n        if ((buffer.descriptor.usage & BufferUsage.INDEX))\n        {\n            type = BUFFER_TYPE.ELEMENT_ARRAY_BUFFER;\n        }\n        else if ((buffer.descriptor.usage & BufferUsage.UNIFORM))\n        {\n            type = BUFFER_TYPE.UNIFORM_BUFFER;\n        }\n\n        const glBuffer = new GlBuffer(gl.createBuffer(), type);\n\n        this._gpuBuffers[buffer.uid] = glBuffer;\n\n        buffer.on('destroy', this.onBufferDestroy, this);\n\n        return glBuffer;\n    }\n}\n","import type { CompressedSource } from '../../../shared/texture/sources/CompressedSource';\nimport type { GlRenderingContext } from '../../context/GlRenderingContext';\nimport type { GlTexture } from '../GlTexture';\nimport type { GLTextureUploader } from './GLTextureUploader';\n\nconst compressedFormatMap: Record<string, boolean> = {\n    'bc1-rgba-unorm': true,\n    'bc1-rgba-unorm-srgb': true,\n    'bc2-rgba-unorm': true,\n    'bc2-rgba-unorm-srgb': true,\n    'bc3-rgba-unorm': true,\n    'bc3-rgba-unorm-srgb': true,\n    'bc4-r-unorm': true,\n    'bc4-r-snorm': true,\n    'bc5-rg-unorm': true,\n    'bc5-rg-snorm': true,\n    'bc6h-rgb-ufloat': true,\n    'bc6h-rgb-float': true,\n    'bc7-rgba-unorm': true,\n    'bc7-rgba-unorm-srgb': true,\n\n    // ETC2 compressed formats usable if \"texture-compression-etc2\" is both\n    // supported by the device/user agent and enabled in requestDevice.\n    'etc2-rgb8unorm': true,\n    'etc2-rgb8unorm-srgb': true,\n    'etc2-rgb8a1unorm': true,\n    'etc2-rgb8a1unorm-srgb': true,\n    'etc2-rgba8unorm': true,\n    'etc2-rgba8unorm-srgb': true,\n    'eac-r11unorm': true,\n    'eac-r11snorm': true,\n    'eac-rg11unorm': true,\n    'eac-rg11snorm': true,\n\n    // ASTC compressed formats usable if \"texture-compression-astc\" is both\n    // supported by the device/user agent and enabled in requestDevice.\n    'astc-4x4-unorm': true,\n    'astc-4x4-unorm-srgb': true,\n    'astc-5x4-unorm': true,\n    'astc-5x4-unorm-srgb': true,\n    'astc-5x5-unorm': true,\n    'astc-5x5-unorm-srgb': true,\n    'astc-6x5-unorm': true,\n    'astc-6x5-unorm-srgb': true,\n    'astc-6x6-unorm': true,\n    'astc-6x6-unorm-srgb': true,\n    'astc-8x5-unorm': true,\n    'astc-8x5-unorm-srgb': true,\n    'astc-8x6-unorm': true,\n    'astc-8x6-unorm-srgb': true,\n    'astc-8x8-unorm': true,\n    'astc-8x8-unorm-srgb': true,\n    'astc-10x5-unorm': true,\n    'astc-10x5-unorm-srgb': true,\n    'astc-10x6-unorm': true,\n    'astc-10x6-unorm-srgb': true,\n    'astc-10x8-unorm': true,\n    'astc-10x8-unorm-srgb': true,\n    'astc-10x10-unorm': true,\n    'astc-10x10-unorm-srgb': true,\n    'astc-12x10-unorm': true,\n    'astc-12x10-unorm-srgb': true,\n    'astc-12x12-unorm': true,\n    'astc-12x12-unorm-srgb': true,\n};\n\nexport const glUploadCompressedTextureResource = {\n\n    id: 'compressed',\n\n    upload(source: CompressedSource, glTexture: GlTexture, gl: GlRenderingContext)\n    {\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\n\n        let mipWidth = source.pixelWidth;\n        let mipHeight = source.pixelHeight;\n\n        const compressed = !!compressedFormatMap[source.format];\n\n        for (let i = 0; i < source.resource.length; i++)\n        {\n            const levelBuffer = source.resource[i];\n\n            if (compressed)\n            {\n                gl.compressedTexImage2D(\n                    gl.TEXTURE_2D, i, glTexture.internalFormat,\n                    mipWidth, mipHeight, 0,\n                    levelBuffer\n                );\n            }\n            else\n            {\n                gl.texImage2D(\n                    gl.TEXTURE_2D, i, glTexture.internalFormat,\n                    mipWidth, mipHeight, 0,\n                    glTexture.format, glTexture.type,\n                    levelBuffer);\n            }\n\n            mipWidth = Math.max(mipWidth >> 1, 1);\n            mipHeight = Math.max(mipHeight >> 1, 1);\n        }\n    }\n} as GLTextureUploader;\n\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { warn } from '../../../utils/logging/warn';\nimport { Geometry } from '../shared/geometry/Geometry';\nimport { Shader } from '../shared/shader/Shader';\nimport { State } from '../shared/state/State';\nimport { TextureSource } from '../shared/texture/sources/TextureSource';\nimport { Texture } from '../shared/texture/Texture';\nimport { GlProgram } from './shader/GlProgram';\n\nimport type { RenderOptions } from '../shared/system/AbstractRenderer';\nimport type { System } from '../shared/system/System';\nimport type { WebGLRenderer } from './WebGLRenderer';\n\nconst bigTriangleGeometry = new Geometry({\n    attributes: {\n        aPosition: [\n            -1.0, -1.0, // Bottom left corner\n            3.0, -1.0, // Bottom right corner, extending beyond right edge\n            -1.0, 3.0 // Top left corner, extending beyond top edge\n        ],\n    },\n});\n\n/**\n * The options for the back buffer system.\n * @memberof rendering\n * @property {boolean} [useBackBuffer=false] - if true will use the back buffer where required\n * @property {boolean} [antialias=false] - if true will ensure the texture is antialiased\n */\nexport interface GlBackBufferOptions\n{\n    /**\n     * if true will use the back buffer where required\n     * @default false\n     * @memberof rendering.WebGLOptions\n     */\n    useBackBuffer?: boolean;\n    /** if true will ensure the texture is antialiased */\n    antialias?: boolean;\n}\n\n/**\n * For blend modes you need to know what pixels you are actually drawing to. For this to be possible in WebGL\n * we need to render to a texture and then present that texture to the screen. This system manages that process.\n *\n * As the main scene is rendered to a texture, it means we can sample it anc copy its pixels,\n * something not possible on the main canvas.\n *\n * If antialiasing is set to to true and useBackBuffer is set to true, then the back buffer will be antialiased.\n * and the main gl context will not.\n *\n * You only need to activate this back buffer if you are using a blend mode that requires it.\n *\n * to activate is simple, you pass `useBackBuffer:true` to your render options\n * @memberof rendering\n */\nexport class GlBackBufferSystem implements System<GlBackBufferOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'backBuffer',\n        priority: 1\n    } as const;\n\n    /** default options for the back buffer system */\n    public static defaultOptions: GlBackBufferOptions = {\n        /** if true will use the back buffer where required */\n        useBackBuffer: false,\n    };\n\n    /** if true, the back buffer is used */\n    public useBackBuffer = false;\n\n    private _backBufferTexture: Texture;\n    private readonly _renderer: WebGLRenderer;\n    private _targetTexture: TextureSource;\n    private _useBackBufferThisRender = false;\n    private _antialias: boolean;\n    private _state: State;\n    private _bigTriangleShader: Shader;\n\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public init(options: GlBackBufferOptions = {})\n    {\n        const { useBackBuffer, antialias } = { ...GlBackBufferSystem.defaultOptions, ...options };\n\n        this.useBackBuffer = useBackBuffer;\n\n        this._antialias = antialias;\n\n        if (!this._renderer.context.supports.msaa)\n        {\n            warn('antialiasing, is not supported on when using the back buffer');\n\n            this._antialias = false;\n        }\n\n        this._state = State.for2d();\n\n        const bigTriangleProgram = new GlProgram({\n            vertex: `\n                attribute vec2 aPosition;\n                out vec2 vUv;\n\n                void main() {\n                    gl_Position = vec4(aPosition, 0.0, 1.0);\n\n                    vUv = (aPosition + 1.0) / 2.0;\n\n                    // flip dem UVs\n                    vUv.y = 1.0 - vUv.y;\n                }`,\n            fragment: `\n                in vec2 vUv;\n                out vec4 finalColor;\n\n                uniform sampler2D uTexture;\n\n                void main() {\n                    finalColor = texture(uTexture, vUv);\n                }`,\n            name: 'big-triangle',\n        });\n\n        this._bigTriangleShader = new Shader({\n            glProgram: bigTriangleProgram,\n            resources: {\n                uTexture: Texture.WHITE.source,\n            },\n        });\n    }\n\n    /**\n     * This is called before the RenderTargetSystem is started. This is where\n     * we replace the target with the back buffer if required.\n     * @param options - The options for this render.\n     */\n    protected renderStart(options: RenderOptions)\n    {\n        const renderTarget = this._renderer.renderTarget.getRenderTarget(options.target);\n\n        this._useBackBufferThisRender = this.useBackBuffer && !!renderTarget.isRoot;\n\n        if (this._useBackBufferThisRender)\n        {\n            const renderTarget = this._renderer.renderTarget.getRenderTarget(options.target);\n\n            this._targetTexture = renderTarget.colorTexture;\n\n            options.target = this._getBackBufferTexture(renderTarget.colorTexture);\n        }\n    }\n\n    protected renderEnd()\n    {\n        this._presentBackBuffer();\n    }\n\n    private _presentBackBuffer()\n    {\n        const renderer = this._renderer;\n\n        renderer.renderTarget.finishRenderPass();\n\n        if (!this._useBackBufferThisRender) return;\n\n        renderer.renderTarget.bind(this._targetTexture, false);\n\n        this._bigTriangleShader.resources.uTexture = this._backBufferTexture.source;\n\n        renderer.encoder.draw({\n            geometry: bigTriangleGeometry,\n            shader: this._bigTriangleShader,\n            state: this._state,\n        });\n    }\n\n    private _getBackBufferTexture(targetSourceTexture: TextureSource)\n    {\n        this._backBufferTexture = this._backBufferTexture || new Texture({\n            source: new TextureSource({\n                width: targetSourceTexture.width,\n                height: targetSourceTexture.height,\n                resolution: targetSourceTexture._resolution,\n                antialias: this._antialias,\n            }),\n        });\n\n        // this will not resize if its the same size already! No extra check required\n        this._backBufferTexture.source.resize(\n            targetSourceTexture.width,\n            targetSourceTexture.height,\n            targetSourceTexture._resolution,\n        );\n\n        return this._backBufferTexture;\n    }\n\n    /** destroys the back buffer */\n    public destroy()\n    {\n        if (this._backBufferTexture)\n        {\n            this._backBufferTexture.destroy();\n            this._backBufferTexture = null;\n        }\n    }\n}\n","/**\n * @private\n */\nexport class IGLUniformData\n{\n    public location: WebGLUniformLocation;\n    public value: number | boolean | Float32Array | Int32Array | Uint32Array | boolean[];\n}\n\n/**\n * Helper class to create a WebGL Program\n * @private\n */\nexport class GlProgramData\n{\n    /** The shader program. */\n    public program: WebGLProgram;\n\n    /**\n     * Holds the uniform data which contains uniform locations\n     * and current uniform values used for caching and preventing unneeded GPU commands.\n     */\n    public uniformData: Record<string, any>;\n\n    /**\n     * UniformGroups holds the various upload functions for the shader. Each uniform group\n     * and program have a unique upload function generated.\n     */\n    public uniformGroups: Record<string, any>;\n\n    /** A hash that stores where UBOs are bound to on the program. */\n    public uniformBlockBindings: Record<string, any>;\n\n    /** A hash for lazily-generated uniform uploading functions. */\n    public uniformSync: Record<string, any>;\n\n    /**\n     * A place where dirty ticks are stored for groups\n     * If a tick here does not match with the Higher level Programs tick, it means\n     * we should re upload the data.\n     */\n    public uniformDirtyGroups: Record<string, any>;\n\n    /**\n     * Makes a new Pixi program.\n     * @param program - webgl program\n     * @param uniformData - uniforms\n     */\n    constructor(program: WebGLProgram, uniformData: {[key: string]: IGLUniformData})\n    {\n        this.program = program;\n        this.uniformData = uniformData;\n        this.uniformGroups = {};\n        this.uniformDirtyGroups = {};\n        this.uniformBlockBindings = {};\n    }\n\n    /** Destroys this program. */\n    public destroy(): void\n    {\n        this.uniformData = null;\n        this.uniformGroups = null;\n        this.uniformDirtyGroups = null;\n        this.uniformBlockBindings = null;\n        this.program = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { Matrix } from '../../../maths/matrix/Matrix';\nimport { compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit';\nimport { roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { textureBitGl } from '../../../rendering/high-shader/shader-bits/textureBit';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport { warn } from '../../../utils/logging/warn';\n\nimport type { Mesh } from '../shared/Mesh';\nimport type { MeshAdaptor, MeshPipe } from '../shared/MeshPipe';\n\n/**\n * A MeshAdaptor that uses the WebGL to render meshes.\n * @memberof rendering\n * @ignore\n */\nexport class GlMeshAdaptor implements MeshAdaptor\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipesAdaptor,\n        ],\n        name: 'mesh',\n    } as const;\n\n    private _shader: Shader;\n\n    public init(): void\n    {\n        const glProgram = compileHighShaderGlProgram({\n            name: 'mesh',\n            bits: [\n                localUniformBitGl,\n                textureBitGl,\n                roundPixelsBitGl,\n            ]\n        });\n\n        this._shader = new Shader({\n            glProgram,\n            resources: {\n                uTexture: Texture.EMPTY.source,\n                textureUniforms: {\n                    uTextureMatrix: { type: 'mat3x3<f32>', value: new Matrix() },\n                }\n            }\n        });\n    }\n\n    public execute(meshPipe: MeshPipe, mesh: Mesh): void\n    {\n        const renderer = meshPipe.renderer;\n\n        let shader: Shader = mesh._shader;\n\n        if (!shader)\n        {\n            shader = this._shader;\n\n            const texture = mesh.texture;\n            const source = texture.source;\n\n            shader.resources.uTexture = source;\n            shader.resources.uSampler = source.style;\n            shader.resources.textureUniforms.uniforms.uTextureMatrix = texture.textureMatrix.mapCoord;\n        }\n        else if (!shader.glProgram)\n        {\n            // #if _DEBUG\n            warn('Mesh shader has no glProgram', mesh.shader);\n            // #endif\n\n            return;\n        }\n\n        // setting the groups to be high to be compatible and not\n        // overlap any other groups\n        shader.groups[100] = renderer.globalUniforms.bindGroup;\n        shader.groups[101] = meshPipe.localUniformsBindGroup;\n\n        renderer.encoder.draw({\n            geometry: mesh._geometry,\n            shader,\n            state: mesh.state,\n        });\n    }\n\n    public destroy(): void\n    {\n        this._shader.destroy(true);\n        this._shader = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { Matrix } from '../../../maths/matrix/Matrix';\nimport { MAX_TEXTURES } from '../../../rendering/batcher/shared/const';\nimport { compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { colorBitGl } from '../../../rendering/high-shader/shader-bits/colorBit';\nimport { generateTextureBatchBitGl } from '../../../rendering/high-shader/shader-bits/generateTextureBatchBit';\nimport { localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit';\nimport { roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { batchSamplersUniformGroup } from '../../../rendering/renderers/gl/shader/batchSamplersUniformGroup';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\n\nimport type { Batch } from '../../../rendering/batcher/shared/Batcher';\nimport type { WebGLRenderer } from '../../../rendering/renderers/gl/WebGLRenderer';\nimport type { Graphics } from '../shared/Graphics';\nimport type { GraphicsAdaptor, GraphicsPipe } from '../shared/GraphicsPipe';\n\n/**\n * A GraphicsAdaptor that uses WebGL to render graphics.\n * @memberof rendering\n * @ignore\n */\nexport class GlGraphicsAdaptor implements GraphicsAdaptor\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipesAdaptor,\n        ],\n        name: 'graphics',\n    } as const;\n\n    public shader: Shader;\n\n    public init()\n    {\n        const uniforms = new UniformGroup({\n            uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n            uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uRound: { value: 0, type: 'f32' },\n        });\n\n        const glProgram = compileHighShaderGlProgram({\n            name: 'graphics',\n            bits: [\n                colorBitGl,\n                generateTextureBatchBitGl(MAX_TEXTURES),\n                localUniformBitGl,\n                roundPixelsBitGl,\n            ]\n        });\n\n        this.shader = new Shader({\n            glProgram,\n            resources: {\n                localUniforms: uniforms,\n                batchSamplers: batchSamplersUniformGroup,\n            }\n        });\n    }\n\n    public execute(graphicsPipe: GraphicsPipe, renderable: Graphics): void\n    {\n        const context = renderable.context;\n        const shader = context.customShader || this.shader;\n        const renderer = graphicsPipe.renderer as WebGLRenderer;\n        const contextSystem = renderer.graphicsContext;\n\n        const {\n            geometry, instructions,\n        } = contextSystem.getContextRenderData(context);\n\n        // WebGL specific..\n        shader.groups[0] = renderer.globalUniforms.bindGroup;\n\n        renderer.state.set(graphicsPipe.state);\n\n        renderer.shader.bind(shader);\n\n        renderer.geometry.bind(geometry, shader.glProgram);\n\n        const batches = instructions.instructions as Batch[];\n\n        for (let i = 0; i < instructions.instructionSize; i++)\n        {\n            const batch = batches[i];\n\n            if (batch.size)\n            {\n                for (let j = 0; j < batch.textures.textures.length; j++)\n                {\n                    renderer.texture.bind(batch.textures.textures[j], j);\n                }\n\n                renderer.geometry.draw('triangle-list', batch.size, batch.start);\n            }\n        }\n    }\n\n    public destroy(): void\n    {\n        this.shader.destroy(true);\n        this.shader = null;\n    }\n}\n","/**\n * Represents a render target.\n * @memberof rendering\n * @ignore\n */\nexport class GlRenderTarget\n{\n    public width = -1;\n    public height = -1;\n    public msaa = false;\n    public framebuffer: WebGLFramebuffer;\n    public resolveTargetFramebuffer: WebGLFramebuffer;\n    public msaaRenderBuffer: WebGLRenderbuffer[] = [];\n    public depthStencilRenderBuffer: WebGLRenderbuffer;\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\n\nimport type { System } from '../shared/system/System';\nimport type { WebGLRenderer } from './WebGLRenderer';\n\n/**\n * The system that handles color masking for the WebGL.\n * @memberof rendering\n */\nexport class GlColorMaskSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'colorMask',\n    } as const;\n\n    private readonly _renderer: WebGLRenderer;\n    private _colorMaskCache = 0b1111;\n\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public setMask(colorMask: number)\n    {\n        if (this._colorMaskCache === colorMask) return;\n        this._colorMaskCache = colorMask;\n\n        this._renderer.gl.colorMask(\n            !!(colorMask & 0b1000),\n            !!(colorMask & 0b0100),\n            !!(colorMask & 0b0010),\n            !!(colorMask & 0b0001)\n        );\n    }\n\n    public destroy?: () => void;\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { generateUniformsSync } from './utils/generateUniformsSync';\n\nimport type { UniformsSyncCallback } from '../../shared/shader/types';\nimport type { UniformGroup } from '../../shared/shader/UniformGroup';\nimport type { System } from '../../shared/system/System';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\nimport type { WebGLRenderer } from '../WebGLRenderer';\nimport type { GlProgram, GlUniformData } from './GlProgram';\n\n/**\n * System plugin to the renderer to manage shaders.\n * @memberof rendering\n */\nexport class GlUniformGroupSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'uniformGroup',\n    } as const;\n\n    /**\n     * The current WebGL rendering context.\n     * @member {WebGLRenderingContext}\n     */\n    protected gl: GlRenderingContext;\n\n    /** Cache to holds the generated functions. Stored against UniformObjects unique signature. */\n    private _cache: Record<string, UniformsSyncCallback> = {};\n    private _renderer: WebGLRenderer;\n\n    private _uniformGroupSyncHash: Record<string, Record<string, UniformsSyncCallback>> = {};\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n\n        this.gl = null;\n        this._cache = {};\n    }\n\n    protected contextChange(gl: GlRenderingContext): void\n    {\n        this.gl = gl;\n    }\n\n    /**\n     * Uploads the uniforms values to the currently bound shader.\n     * @param group - the uniforms values that be applied to the current shader\n     * @param program\n     * @param syncData\n     * @param syncData.textureCount\n     */\n    public updateUniformGroup(group: UniformGroup, program: GlProgram, syncData: { textureCount: number }): void\n    {\n        const programData = this._renderer.shader._getProgramData(program);\n\n        if (!group.isStatic || group._dirtyId !== programData.uniformDirtyGroups[group.uid])\n        {\n            programData.uniformDirtyGroups[group.uid] = group._dirtyId;\n\n            const syncFunc = this._getUniformSyncFunction(group, program);\n\n            syncFunc(programData.uniformData, group.uniforms, this._renderer, syncData);\n        }\n    }\n\n    /**\n     * Overrideable by the pixi.js/unsafe-eval package to use static syncUniforms instead.\n     * @param group\n     * @param program\n     */\n    private _getUniformSyncFunction(group: UniformGroup, program: GlProgram): UniformsSyncCallback\n    {\n        return this._uniformGroupSyncHash[group._signature]?.[program._key]\n            || this._createUniformSyncFunction(group, program);\n    }\n\n    private _createUniformSyncFunction(group: UniformGroup, program: GlProgram): UniformsSyncCallback\n    {\n        const uniformGroupSyncHash = this._uniformGroupSyncHash[group._signature]\n            || (this._uniformGroupSyncHash[group._signature] = {});\n\n        const id = this._getSignature(group, program._uniformData, 'u');\n\n        if (!this._cache[id])\n        {\n            this._cache[id] = this._generateUniformsSync(group, program._uniformData);\n        }\n\n        uniformGroupSyncHash[program._key] = this._cache[id];\n\n        return uniformGroupSyncHash[program._key];\n    }\n\n    private _generateUniformsSync(group: UniformGroup, uniformData: Record<string, GlUniformData>): UniformsSyncCallback\n    {\n        return generateUniformsSync(group, uniformData);\n    }\n\n    /**\n     * Takes a uniform group and data and generates a unique signature for them.\n     * @param group - The uniform group to get signature of\n     * @param group.uniforms\n     * @param uniformData - Uniform information generated by the shader\n     * @param preFix\n     * @returns Unique signature of the uniform group\n     */\n    private _getSignature(group: UniformGroup, uniformData: Record<string, any>, preFix: string): string\n    {\n        const uniforms = group.uniforms;\n\n        const strings = [`${preFix}-`];\n\n        for (const i in uniforms)\n        {\n            strings.push(i);\n\n            if (uniformData[i])\n            {\n                strings.push(uniformData[i].type);\n            }\n        }\n\n        return strings.join('-');\n    }\n\n    /** Destroys this System and removes all its textures. */\n    public destroy(): void\n    {\n        this._renderer = null;\n        this._cache = null;\n    }\n}\n","import { warn } from '../../../../../utils/logging/warn';\nimport { GlProgramData } from '../GlProgramData';\nimport { compileShader } from './compileShader';\nimport { defaultValue } from './defaultValue';\nimport { extractAttributesFromGlProgram } from './extractAttributesFromGlProgram';\nimport { getUboData } from './getUboData';\nimport { getUniformData } from './getUniformData';\nimport { logProgramError } from './logProgramError';\n\nimport type { GlRenderingContext } from '../../context/GlRenderingContext';\nimport type { GlProgram } from '../GlProgram';\nimport type { IGLUniformData } from '../GlProgramData';\n\n/**\n * generates a WebGL Program object from a high level Pixi Program.\n * @param gl - a rendering context on which to generate the program\n * @param program - the high level Pixi Program.\n * @private\n */\nexport function generateProgram(gl: GlRenderingContext, program: GlProgram): GlProgramData\n{\n    const glVertShader = compileShader(gl, gl.VERTEX_SHADER, program.vertex);\n    const glFragShader = compileShader(gl, gl.FRAGMENT_SHADER, program.fragment);\n\n    const webGLProgram = gl.createProgram();\n\n    gl.attachShader(webGLProgram, glVertShader);\n    gl.attachShader(webGLProgram, glFragShader);\n\n    const transformFeedbackVaryings = program.transformFeedbackVaryings;\n\n    if (transformFeedbackVaryings)\n    {\n        if (typeof gl.transformFeedbackVaryings !== 'function')\n        {\n            // #if _DEBUG\n            warn(`TransformFeedback is not supported but TransformFeedbackVaryings are given.`);\n            // #endif\n        }\n        else\n        {\n            gl.transformFeedbackVaryings(\n                webGLProgram,\n                transformFeedbackVaryings.names,\n                transformFeedbackVaryings.bufferMode === 'separate'\n                    ? gl.SEPARATE_ATTRIBS\n                    : gl.INTERLEAVED_ATTRIBS\n            );\n        }\n    }\n\n    gl.linkProgram(webGLProgram);\n\n    if (!gl.getProgramParameter(webGLProgram, gl.LINK_STATUS))\n    {\n        logProgramError(gl, webGLProgram, glVertShader, glFragShader);\n    }\n\n    // GLSL 1.00: bind attributes sorted by name in ascending order\n    // GLSL 3.00: don't change the attribute locations that where chosen by the compiler\n    //            or assigned by the layout specifier in the shader source code\n    program._attributeData = extractAttributesFromGlProgram(\n        webGLProgram,\n        gl,\n        !(/^[ \\t]*#[ \\t]*version[ \\t]+300[ \\t]+es[ \\t]*$/m).test(program.vertex)\n    );\n\n    program._uniformData = getUniformData(webGLProgram, gl);\n    program._uniformBlockData = getUboData(webGLProgram, gl);\n\n    gl.deleteShader(glVertShader);\n    gl.deleteShader(glFragShader);\n\n    const uniformData: {[key: string]: IGLUniformData} = {};\n\n    for (const i in program._uniformData)\n    {\n        const data = program._uniformData[i];\n\n        uniformData[i] = {\n            location: gl.getUniformLocation(webGLProgram, i),\n            value: defaultValue(data.type, data.size),\n        };\n    }\n\n    const glProgram = new GlProgramData(webGLProgram, uniformData);\n\n    return glProgram;\n}\n","import type { TextureSource } from '../../../shared/texture/sources/TextureSource';\nimport type { GlRenderingContext } from '../../context/GlRenderingContext';\nimport type { GlTexture } from '../GlTexture';\nimport type { GLTextureUploader } from './GLTextureUploader';\n\nexport const glUploadBufferImageResource = {\n\n    id: 'image',\n\n    upload(source: TextureSource, glTexture: GlTexture, gl: GlRenderingContext)\n    {\n        if (glTexture.width === source.width || glTexture.height === source.height)\n        {\n            gl.texSubImage2D(\n                gl.TEXTURE_2D,\n                0,\n                0,\n                0,\n                glTexture.format,\n                glTexture.type,\n                source.resource\n            );\n        }\n        else\n        {\n            gl.texImage2D(\n                glTexture.target,\n                0,\n                glTexture.internalFormat,\n                source.width,\n                source.height,\n                0,\n                glTexture.format,\n                glTexture.type,\n                source.resource\n            );\n        }\n\n        glTexture.width = source.width;\n        glTexture.height = source.height;\n    }\n} as GLTextureUploader;\n\n","import { getAttributeInfoFromFormat } from '../../../shared/geometry/utils/getAttributeInfoFromFormat';\nimport { mapGlToVertexFormat } from './mapType';\n\nimport type { Attribute } from '../../../shared/geometry/Geometry';\n\nexport type ExtractedAttributeData = Omit<Attribute, 'buffer'>;\n\n/**\n * returns the attribute data from the program\n * @private\n * @param {WebGLProgram} [program] - the WebGL program\n * @param {WebGLRenderingContext} [gl] - the WebGL context\n * @returns {object} the attribute data for this program\n */\n\nexport function extractAttributesFromGlProgram(\n    program: WebGLProgram,\n    gl: WebGLRenderingContextBase,\n    sortAttributes = false\n): Record<string, ExtractedAttributeData>\n{\n    const attributes: {[key: string]: ExtractedAttributeData} = {};\n\n    const totalAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n\n    for (let i = 0; i < totalAttributes; i++)\n    {\n        const attribData = gl.getActiveAttrib(program, i);\n\n        // ignore the default ones!\n        if (attribData.name.startsWith('gl_'))\n        {\n            continue;\n        }\n\n        const format = mapGlToVertexFormat(gl, attribData.type);\n\n        attributes[attribData.name] = {\n            location: 0, // set further down..\n            format,\n            stride: getAttributeInfoFromFormat(format).stride,\n            offset: 0,\n            instance: false,\n            start: 0,\n        };\n    }\n\n    const keys = Object.keys(attributes);\n\n    if (sortAttributes)\n    {\n        keys.sort((a, b) => (a > b) ? 1 : -1); // eslint-disable-line no-confusing-arrow\n\n        for (let i = 0; i < keys.length; i++)\n        {\n            attributes[keys[i]].location = i;\n\n            gl.bindAttribLocation(program, i, keys[i]);\n        }\n\n        gl.linkProgram(program);\n    }\n    else\n    {\n        for (let i = 0; i < keys.length; i++)\n        {\n            attributes[keys[i]].location = gl.getAttribLocation(program, keys[i]);\n        }\n    }\n\n    return attributes;\n}\n","import type { Dict } from '../../../../../utils/types';\nimport type { VertexFormat } from '../../../shared/geometry/const';\n\nlet GL_TABLE: Dict<string> = null;\n\nconst GL_TO_GLSL_TYPES: Dict<string> = {\n    FLOAT:       'float',\n    FLOAT_VEC2:  'vec2',\n    FLOAT_VEC3:  'vec3',\n    FLOAT_VEC4:  'vec4',\n\n    INT:         'int',\n    INT_VEC2:    'ivec2',\n    INT_VEC3:    'ivec3',\n    INT_VEC4:    'ivec4',\n\n    UNSIGNED_INT:         'uint',\n    UNSIGNED_INT_VEC2:    'uvec2',\n    UNSIGNED_INT_VEC3:    'uvec3',\n    UNSIGNED_INT_VEC4:    'uvec4',\n\n    BOOL:        'bool',\n    BOOL_VEC2:   'bvec2',\n    BOOL_VEC3:   'bvec3',\n    BOOL_VEC4:   'bvec4',\n\n    FLOAT_MAT2:  'mat2',\n    FLOAT_MAT3:  'mat3',\n    FLOAT_MAT4:  'mat4',\n\n    SAMPLER_2D:              'sampler2D',\n    INT_SAMPLER_2D:          'sampler2D',\n    UNSIGNED_INT_SAMPLER_2D: 'sampler2D',\n    SAMPLER_CUBE:              'samplerCube',\n    INT_SAMPLER_CUBE:          'samplerCube',\n    UNSIGNED_INT_SAMPLER_CUBE: 'samplerCube',\n    SAMPLER_2D_ARRAY:              'sampler2DArray',\n    INT_SAMPLER_2D_ARRAY:          'sampler2DArray',\n    UNSIGNED_INT_SAMPLER_2D_ARRAY: 'sampler2DArray',\n};\n\nconst GLSL_TO_VERTEX_TYPES: Record<string, VertexFormat> = {\n\n    float: 'float32',\n    vec2: 'float32x2',\n    vec3: 'float32x3',\n    vec4: 'float32x4',\n\n    int: 'sint32',\n    ivec2: 'sint32x2',\n    ivec3: 'sint32x3',\n    ivec4: 'sint32x4',\n\n    uint: 'uint32',\n    uvec2: 'uint32x2',\n    uvec3: 'uint32x3',\n    uvec4: 'uint32x4',\n\n    bool: 'uint32',\n    bvec2: 'uint32x2',\n    bvec3: 'uint32x3',\n    bvec4: 'uint32x4',\n};\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\nexport function mapType(gl: any, type: number): string\n{\n    if (!GL_TABLE)\n    {\n        const typeNames = Object.keys(GL_TO_GLSL_TYPES);\n\n        GL_TABLE = {};\n\n        for (let i = 0; i < typeNames.length; ++i)\n        {\n            const tn = typeNames[i];\n\n            GL_TABLE[gl[tn]] = GL_TO_GLSL_TYPES[tn];\n        }\n    }\n\n    return GL_TABLE[type];\n}\n\nexport function mapGlToVertexFormat(gl: any, type: number): VertexFormat\n{\n    const typeValue = mapType(gl, type);\n\n    return GLSL_TO_VERTEX_TYPES[typeValue] || 'float32';\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { GpuStencilModesToPixi } from '../gpu/state/GpuStencilModesToPixi';\nimport { STENCIL_MODES } from '../shared/state/const';\n\nimport type { RenderTarget } from '../shared/renderTarget/RenderTarget';\nimport type { System } from '../shared/system/System';\nimport type { WebGLRenderer } from './WebGLRenderer';\n\n/**\n * This manages the stencil buffer. Used primarily for masking\n * @memberof rendering\n */\nexport class GlStencilSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'stencil',\n    } as const;\n\n    private _gl: WebGLRenderingContext;\n\n    private readonly _stencilCache = {\n        enabled: false,\n        stencilReference: 0,\n        stencilMode: STENCIL_MODES.NONE,\n    };\n\n    private _renderTargetStencilState: Record<number, {\n        stencilMode: STENCIL_MODES;\n        stencilReference: number;\n    }> = Object.create(null);\n\n    private _stencilOpsMapping: {\n        keep: number;\n        zero: number;\n        replace: number;\n        invert: number;\n        'increment-clamp': number;\n        'decrement-clamp': number;\n        'increment-wrap': number;\n        'decrement-wrap': number;\n    };\n\n    private _comparisonFuncMapping: {\n        always: number;\n        never: number;\n        equal: number;\n        'not-equal': number;\n        less: number;\n        'less-equal': number;\n        greater: number;\n        'greater-equal': number;\n    };\n\n    private _activeRenderTarget: RenderTarget;\n\n    constructor(renderer: WebGLRenderer)\n    {\n        renderer.renderTarget.onRenderTargetChange.add(this);\n    }\n\n    protected contextChange(gl: WebGLRenderingContext)\n    {\n        // TODO - this could be declared in a gl const\n        // we know the numbers don't tend to change!\n        this._gl = gl;\n\n        this._comparisonFuncMapping = {\n            always: gl.ALWAYS,\n            never: gl.NEVER,\n            equal: gl.EQUAL,\n            'not-equal': gl.NOTEQUAL,\n            less: gl.LESS,\n            'less-equal': gl.LEQUAL,\n            greater: gl.GREATER,\n            'greater-equal': gl.GEQUAL,\n        };\n\n        this._stencilOpsMapping = {\n            keep: gl.KEEP,\n            zero: gl.ZERO,\n            replace: gl.REPLACE,\n            invert: gl.INVERT,\n            'increment-clamp': gl.INCR,\n            'decrement-clamp': gl.DECR,\n            'increment-wrap': gl.INCR_WRAP,\n            'decrement-wrap': gl.DECR_WRAP,\n        };\n\n        // reset stencil cache\n        this._stencilCache.enabled = false;\n        this._stencilCache.stencilMode = STENCIL_MODES.NONE;\n        this._stencilCache.stencilReference = 0;\n    }\n\n    protected onRenderTargetChange(renderTarget: RenderTarget)\n    {\n        if (this._activeRenderTarget === renderTarget) return;\n\n        this._activeRenderTarget = renderTarget;\n\n        let stencilState = this._renderTargetStencilState[renderTarget.uid];\n\n        if (!stencilState)\n        {\n            stencilState = this._renderTargetStencilState[renderTarget.uid] = {\n                stencilMode: STENCIL_MODES.DISABLED,\n                stencilReference: 0,\n            };\n        }\n\n        // restore the current render targets stencil state..\n        this.setStencilMode(stencilState.stencilMode, stencilState.stencilReference);\n    }\n\n    public setStencilMode(stencilMode: STENCIL_MODES, stencilReference: number)\n    {\n        const stencilState = this._renderTargetStencilState[this._activeRenderTarget.uid];\n\n        const gl = this._gl;\n        const mode = GpuStencilModesToPixi[stencilMode];\n\n        const _stencilCache = this._stencilCache;\n\n        // store the stencil state for restoration later, if a render target changes\n        stencilState.stencilMode = stencilMode;\n        stencilState.stencilReference = stencilReference;\n\n        if (stencilMode === STENCIL_MODES.DISABLED)\n        {\n            if (this._stencilCache.enabled)\n            {\n                this._stencilCache.enabled = false;\n\n                gl.disable(gl.STENCIL_TEST);\n            }\n\n            return;\n        }\n\n        if (!this._stencilCache.enabled)\n        {\n            this._stencilCache.enabled = true;\n            gl.enable(gl.STENCIL_TEST);\n        }\n\n        if (stencilMode !== _stencilCache.stencilMode || _stencilCache.stencilReference !== stencilReference)\n        {\n            _stencilCache.stencilMode = stencilMode;\n            _stencilCache.stencilReference = stencilReference;\n\n            // this is pretty simple mapping.\n            // will work for pixi's simple mask cases.\n            // although a true mapping of the GPU state to webGL state should be done\n            gl.stencilFunc(this._comparisonFuncMapping[mode.stencilBack.compare], stencilReference, 0xFF);\n            gl.stencilOp(gl.KEEP, gl.KEEP, this._stencilOpsMapping[mode.stencilBack.passOp]);\n        }\n    }\n\n    public destroy?: () => void;\n}\n","import {\n    compareModeToGlCompare,\n    mipmapScaleModeToGlFilter,\n    scaleModeToGlFilter,\n    wrapModeToGlAddress\n} from './pixiToGlMaps';\n\nimport type { TextureStyle } from '../../../shared/texture/TextureStyle';\n\nexport function applyStyleParams(\n    style: TextureStyle,\n    gl: WebGL2RenderingContext,\n    mipmaps: boolean,\n    // eslint-disable-next-line camelcase\n    anisotropicExt: EXT_texture_filter_anisotropic,\n    glFunctionName: 'samplerParameteri' | 'texParameteri',\n    firstParam: 3553 | WebGLSampler,\n    forceClamp: boolean,\n    /** if true we can skip setting certain values if the values is the same as the default gl values */\n    firstCreation: boolean\n)\n{\n    const castParam = firstParam as 3553;\n\n    if (!firstCreation\n        || style.addressModeU !== 'repeat'\n        || style.addressModeV !== 'repeat'\n        || style.addressModeW !== 'repeat'\n    )\n    {\n        // 1. set the wrapping mode\n        const wrapModeS = wrapModeToGlAddress[forceClamp ? 'clamp-to-edge' : style.addressModeU];\n        const wrapModeT = wrapModeToGlAddress[forceClamp ? 'clamp-to-edge' : style.addressModeV];\n        const wrapModeR = wrapModeToGlAddress[forceClamp ? 'clamp-to-edge' : style.addressModeW];\n\n        gl[glFunctionName](castParam, gl.TEXTURE_WRAP_S, wrapModeS);\n        gl[glFunctionName](castParam, gl.TEXTURE_WRAP_T, wrapModeT);\n\n        // does not exist in webGL1\n        if (gl.TEXTURE_WRAP_R) gl[glFunctionName](castParam, gl.TEXTURE_WRAP_R, wrapModeR);\n    }\n\n    if (!firstCreation || style.magFilter !== 'linear')\n    {\n        // 2. set the filtering mode\n        gl[glFunctionName](castParam, gl.TEXTURE_MAG_FILTER, scaleModeToGlFilter[style.magFilter]);\n    }\n\n    // assuming the currently bound texture is the one we want to set the filter for\n    // the only smelly part of this code, WebGPU is much better here :P\n    if (mipmaps)\n    {\n        if (!firstCreation || style.mipmapFilter !== 'linear')\n        {\n            const glFilterMode = mipmapScaleModeToGlFilter[style.minFilter][style.mipmapFilter];\n\n            gl[glFunctionName](castParam, gl.TEXTURE_MIN_FILTER, glFilterMode);\n        }\n    }\n\n    else\n    {\n        gl[glFunctionName](castParam, gl.TEXTURE_MIN_FILTER, scaleModeToGlFilter[style.minFilter]);\n    }\n\n    // 3. set the anisotropy\n    if (anisotropicExt && style.maxAnisotropy > 1)\n    {\n        const level = Math.min(style.maxAnisotropy, gl.getParameter(anisotropicExt.MAX_TEXTURE_MAX_ANISOTROPY_EXT));\n\n        gl[glFunctionName](castParam, anisotropicExt.TEXTURE_MAX_ANISOTROPY_EXT, level);\n    }\n\n    // 4. set the compare mode\n    if (style.compare)\n    {\n        gl[glFunctionName](castParam, gl.TEXTURE_COMPARE_FUNC, compareModeToGlCompare[style.compare]);\n    }\n}\n","import { GL_FORMATS, GL_TARGETS, GL_TYPES } from './const';\n\n/**\n * Internal texture for WebGL context\n * @memberof rendering\n * @ignore\n */\nexport class GlTexture\n{\n    public target: GL_TARGETS = GL_TARGETS.TEXTURE_2D;\n\n    /** The WebGL texture. */\n    public texture: WebGLTexture;\n\n    /** Width of texture that was used in texImage2D. */\n    public width: number;\n\n    /** Height of texture that was used in texImage2D. */\n    public height: number;\n\n    /** Whether mip levels has to be generated. */\n    public mipmap: boolean;\n\n    /** Type copied from texture source. */\n    public type: number;\n\n    /** Type copied from texture source. */\n    public internalFormat: number;\n\n    /** Type of sampler corresponding to this texture. See {@link SAMPLER_TYPES} */\n    public samplerType: number;\n\n    public format: GL_FORMATS;\n\n    constructor(texture: WebGLTexture)\n    {\n        this.texture = texture;\n        this.width = -1;\n        this.height = -1;\n        this.type = GL_TYPES.UNSIGNED_BYTE;\n        this.internalFormat = GL_FORMATS.RGBA;\n        this.format = GL_FORMATS.RGBA;\n        this.samplerType = 0;\n    }\n}\n","import type { CanvasSource } from '../../../shared/texture/sources/CanvasSource';\nimport type { ImageSource } from '../../../shared/texture/sources/ImageSource';\nimport type { GlRenderingContext } from '../../context/GlRenderingContext';\nimport type { GlTexture } from '../GlTexture';\nimport type { GLTextureUploader } from './GLTextureUploader';\n\nexport const glUploadImageResource = {\n\n    id: 'image',\n\n    upload(source: ImageSource | CanvasSource, glTexture: GlTexture, gl: GlRenderingContext, webGLVersion: number)\n    {\n        const premultipliedAlpha = source.alphaMode === 'premultiply-alpha-on-upload';\n\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, premultipliedAlpha);\n\n        const glWidth = glTexture.width;\n        const glHeight = glTexture.height;\n\n        const textureWidth = source.pixelWidth;\n        const textureHeight = source.pixelHeight;\n\n        const resourceWidth = source.resourceWidth;\n        const resourceHeight = source.resourceHeight;\n\n        if (resourceWidth < textureWidth || resourceHeight < textureHeight)\n        {\n            if (glWidth !== textureWidth || glHeight !== textureHeight)\n            {\n                gl.texImage2D(\n                    glTexture.target,\n                    0,\n                    glTexture.internalFormat,\n                    textureWidth,\n                    textureHeight,\n                    0,\n                    glTexture.format,\n                    glTexture.type,\n                    null\n                );\n            }\n\n            if (webGLVersion === 2)\n            {\n                gl.texSubImage2D(\n                    gl.TEXTURE_2D,\n                    0,\n                    0,\n                    0,\n                    resourceWidth,\n                    resourceHeight,\n                    glTexture.format,\n                    glTexture.type,\n                    source.resource as TexImageSource\n                );\n            }\n            else\n            {\n                gl.texSubImage2D(\n                    gl.TEXTURE_2D,\n                    0,\n                    0,\n                    0,\n                    glTexture.format,\n                    glTexture.type,\n                    source.resource as TexImageSource\n                );\n            }\n        }\n        else if (glWidth === textureWidth || glHeight === textureHeight)\n        {\n            gl.texSubImage2D(\n                gl.TEXTURE_2D,\n                0,\n                0,\n                0,\n                glTexture.format,\n                glTexture.type,\n                source.resource as TexImageSource\n            );\n        }\n        else if (webGLVersion === 2)\n        {\n            gl.texImage2D(\n                glTexture.target,\n                0,\n                glTexture.internalFormat,\n                textureWidth,\n                textureHeight,\n                0,\n                glTexture.format,\n                glTexture.type,\n                source.resource as TexImageSource\n            );\n        }\n        else\n        {\n            gl.texImage2D(\n                glTexture.target,\n                0,\n                glTexture.internalFormat,\n                glTexture.format,\n                glTexture.type,\n                source.resource as TexImageSource\n            );\n        }\n\n        glTexture.width = textureWidth;\n        glTexture.height = textureHeight;\n    }\n} as GLTextureUploader;\n\n","import type { BLEND_MODES } from '../../shared/state/const';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\n\n/**\n * Maps gl blend combinations to WebGL.\n * @param gl\n * @returns {object} Map of gl blend combinations to WebGL.\n */\nexport function mapWebGLBlendModesToPixi(gl: GlRenderingContext): Record<BLEND_MODES, number[]>\n{\n    const blendMap: Partial<Record<BLEND_MODES, number[]>> = {};\n\n    // TODO - premultiply alpha would be different.\n    // add a boolean for that!\n    blendMap.normal = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    blendMap.add = [gl.ONE, gl.ONE];\n    blendMap.multiply = [gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    blendMap.screen = [gl.ONE, gl.ONE_MINUS_SRC_COLOR, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    blendMap.none = [0, 0];\n\n    // not-premultiplied blend modes\n    blendMap['normal-npm'] = [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    blendMap['add-npm'] = [gl.SRC_ALPHA, gl.ONE, gl.ONE, gl.ONE];\n    blendMap['screen-npm'] = [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_COLOR, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n\n    blendMap.erase = [gl.ZERO, gl.ONE_MINUS_SRC_ALPHA];\n    // TODO - implement if requested!\n    // composite operations\n    // array[BLEND_MODES.SRC_IN] = [gl.DST_ALPHA, gl.ZERO];\n    // array[BLEND_MODES.SRC_OUT] = [gl.ONE_MINUS_DST_ALPHA, gl.ZERO];\n    // array[BLEND_MODES.SRC_ATOP] = [gl.DST_ALPHA, gl.ONE_MINUS_SRC_ALPHA];\n    // array[BLEND_MODES.DST_OVER] = [gl.ONE_MINUS_DST_ALPHA, gl.ONE];\n    // array[BLEND_MODES.DST_IN] = [gl.ZERO, gl.SRC_ALPHA];\n    // array[BLEND_MODES.DST_OUT] = [gl.ZERO, gl.ONE_MINUS_SRC_ALPHA];\n    // array[BLEND_MODES.DST_ATOP] = [gl.ONE_MINUS_DST_ALPHA, gl.SRC_ALPHA];\n    // array[BLEND_MODES.XOR] = [gl.ONE_MINUS_DST_ALPHA, gl.ONE_MINUS_SRC_ALPHA];\n    // SUBTRACT from flash\n    // array[BLEND_MODES.SUBTRACT] = [gl.ONE, gl.ONE, gl.ONE, gl.ONE, gl.FUNC_REVERSE_SUBTRACT, gl.FUNC_ADD];\n\n    return blendMap as Record<BLEND_MODES, number[]>;\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { State } from '../../shared/state/State';\nimport { mapWebGLBlendModesToPixi } from './mapWebGLBlendModesToPixi';\n\nimport type { BLEND_MODES } from '../../shared/state/const';\nimport type { System } from '../../shared/system/System';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\n\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\n\n/**\n * System plugin to the renderer to manage WebGL state machines\n * @memberof rendering\n */\nexport class GlStateSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'state',\n    } as const;\n\n    /**\n     * State ID\n     * @readonly\n     */\n    public stateId: number;\n\n    /**\n     * Polygon offset\n     * @readonly\n     */\n    public polygonOffset: number;\n\n    /**\n     * Blend mode\n     * @default 'none'\n     * @readonly\n     */\n    public blendMode: BLEND_MODES;\n\n    /** Whether current blend equation is different */\n    protected _blendEq: boolean;\n\n    /**\n     * GL context\n     * @member {WebGLRenderingContext}\n     * @readonly\n     */\n    protected gl: GlRenderingContext;\n\n    protected blendModesMap: Record<BLEND_MODES, number[]>;\n\n    /**\n     * Collection of calls\n     * @member {Function[]}\n     */\n    protected readonly map: ((value: boolean) => void)[];\n\n    /**\n     * Collection of check calls\n     * @member {Function[]}\n     */\n    protected readonly checks: ((system: this, state: State) => void)[];\n\n    /**\n     * Default WebGL State\n     * @readonly\n     */\n    protected defaultState: State;\n\n    constructor()\n    {\n        this.gl = null;\n\n        this.stateId = 0;\n        this.polygonOffset = 0;\n        this.blendMode = 'none';\n\n        this._blendEq = false;\n\n        // map functions for when we set state..\n        this.map = [];\n        this.map[BLEND] = this.setBlend;\n        this.map[OFFSET] = this.setOffset;\n        this.map[CULLING] = this.setCullFace;\n        this.map[DEPTH_TEST] = this.setDepthTest;\n        this.map[WINDING] = this.setFrontFace;\n        this.map[DEPTH_MASK] = this.setDepthMask;\n\n        this.checks = [];\n\n        this.defaultState = State.for2d();\n    }\n\n    protected contextChange(gl: GlRenderingContext): void\n    {\n        this.gl = gl;\n\n        this.blendModesMap = mapWebGLBlendModesToPixi(gl);\n\n        this.reset();\n    }\n\n    /**\n     * Sets the current state\n     * @param {*} state - The state to set.\n     */\n    public set(state: State): void\n    {\n        state = state || this.defaultState;\n\n        // TODO maybe to an object check? ( this.state === state )?\n        if (this.stateId !== state.data)\n        {\n            let diff = this.stateId ^ state.data;\n            let i = 0;\n\n            // order from least to most common\n            while (diff)\n            {\n                if (diff & 1)\n                {\n                    // state change!\n                    this.map[i].call(this, !!(state.data & (1 << i)));\n                }\n\n                diff = diff >> 1;\n                i++;\n            }\n\n            this.stateId = state.data;\n        }\n\n        // based on the above settings we check for specific modes..\n        // for example if blend is active we check and set the blend modes\n        // or of polygon offset is active we check the poly depth.\n        for (let i = 0; i < this.checks.length; i++)\n        {\n            this.checks[i](this, state);\n        }\n    }\n\n    /**\n     * Sets the state, when previous state is unknown.\n     * @param {*} state - The state to set\n     */\n    public forceState(state: State): void\n    {\n        state = state || this.defaultState;\n        for (let i = 0; i < this.map.length; i++)\n        {\n            this.map[i].call(this, !!(state.data & (1 << i)));\n        }\n        for (let i = 0; i < this.checks.length; i++)\n        {\n            this.checks[i](this, state);\n        }\n\n        this.stateId = state.data;\n    }\n\n    /**\n     * Sets whether to enable or disable blending.\n     * @param value - Turn on or off WebGl blending.\n     */\n    public setBlend(value: boolean): void\n    {\n        this._updateCheck(GlStateSystem._checkBlendMode, value);\n\n        this.gl[value ? 'enable' : 'disable'](this.gl.BLEND);\n    }\n\n    /**\n     * Sets whether to enable or disable polygon offset fill.\n     * @param value - Turn on or off webgl polygon offset testing.\n     */\n    public setOffset(value: boolean): void\n    {\n        this._updateCheck(GlStateSystem._checkPolygonOffset, value);\n\n        this.gl[value ? 'enable' : 'disable'](this.gl.POLYGON_OFFSET_FILL);\n    }\n\n    /**\n     * Sets whether to enable or disable depth test.\n     * @param value - Turn on or off webgl depth testing.\n     */\n    public setDepthTest(value: boolean): void\n    {\n        this.gl[value ? 'enable' : 'disable'](this.gl.DEPTH_TEST);\n    }\n\n    /**\n     * Sets whether to enable or disable depth mask.\n     * @param value - Turn on or off webgl depth mask.\n     */\n    public setDepthMask(value: boolean): void\n    {\n        this.gl.depthMask(value);\n    }\n\n    /**\n     * Sets whether to enable or disable cull face.\n     * @param {boolean} value - Turn on or off webgl cull face.\n     */\n    public setCullFace(value: boolean): void\n    {\n        this.gl[value ? 'enable' : 'disable'](this.gl.CULL_FACE);\n    }\n\n    /**\n     * Sets the gl front face.\n     * @param {boolean} value - true is clockwise and false is counter-clockwise\n     */\n    public setFrontFace(value: boolean): void\n    {\n        this.gl.frontFace(this.gl[value ? 'CW' : 'CCW']);\n    }\n\n    /**\n     * Sets the blend mode.\n     * @param {number} value - The blend mode to set to.\n     */\n    public setBlendMode(value: BLEND_MODES): void\n    {\n        if (!this.blendModesMap[value])\n        {\n            value = 'normal';\n        }\n\n        if (value === this.blendMode)\n        {\n            return;\n        }\n\n        this.blendMode = value;\n\n        const mode = this.blendModesMap[value];\n        const gl = this.gl;\n\n        if (mode.length === 2)\n        {\n            gl.blendFunc(mode[0], mode[1]);\n        }\n        else\n        {\n            gl.blendFuncSeparate(mode[0], mode[1], mode[2], mode[3]);\n        }\n\n        if (mode.length === 6)\n        {\n            this._blendEq = true;\n            gl.blendEquationSeparate(mode[4], mode[5]);\n        }\n        else if (this._blendEq)\n        {\n            this._blendEq = false;\n            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n        }\n    }\n\n    /**\n     * Sets the polygon offset.\n     * @param {number} value - the polygon offset\n     * @param {number} scale - the polygon offset scale\n     */\n    public setPolygonOffset(value: number, scale: number): void\n    {\n        this.gl.polygonOffset(value, scale);\n    }\n\n    // used\n    /** Resets all the logic and disables the VAOs. */\n    public reset(): void\n    {\n        this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, false);\n\n        this.forceState(this.defaultState);\n\n        this._blendEq = true;\n        // setting to '' means the blend mode will be set as soon as we set the first blend mode when rendering!\n        this.blendMode = '' as BLEND_MODES;\n        this.setBlendMode('normal');\n    }\n\n    /**\n     * Checks to see which updates should be checked based on which settings have been activated.\n     *\n     * For example, if blend is enabled then we should check the blend modes each time the state is changed\n     * or if polygon fill is activated then we need to check if the polygon offset changes.\n     * The idea is that we only check what we have too.\n     * @param func - the checking function to add or remove\n     * @param value - should the check function be added or removed.\n     */\n    private _updateCheck(func: (system: this, state: State) => void, value: boolean): void\n    {\n        const index = this.checks.indexOf(func);\n\n        if (value && index === -1)\n        {\n            this.checks.push(func);\n        }\n        else if (!value && index !== -1)\n        {\n            this.checks.splice(index, 1);\n        }\n    }\n\n    /**\n     * A private little wrapper function that we call to check the blend mode.\n     * @param system - the System to perform the state check on\n     * @param state - the state that the blendMode will pulled from\n     */\n    private static _checkBlendMode(system: GlStateSystem, state: State): void\n    {\n        system.setBlendMode(state.blendMode);\n    }\n\n    /**\n     * A private little wrapper function that we call to check the polygon offset.\n     * @param system - the System to perform the state check on\n     * @param state - the state that the blendMode will pulled from\n     */\n    private static _checkPolygonOffset(system: GlStateSystem, state: State): void\n    {\n        system.setPolygonOffset(1, state.polygonOffset);\n    }\n\n    /**\n     * @ignore\n     */\n    public destroy(): void\n    {\n        this.gl = null;\n        this.checks.length = 0;\n    }\n}\n","import { defaultValue } from './defaultValue';\nimport { mapType } from './mapType';\n\nimport type { GlUniformData } from '../GlProgram';\n\n/**\n * returns the uniform data from the program\n * @private\n * @param program - the webgl program\n * @param gl - the WebGL context\n * @returns {object} the uniform data for this program\n */\nexport function getUniformData(program: WebGLProgram, gl: WebGLRenderingContextBase): {[key: string]: GlUniformData}\n{\n    const uniforms: {[key: string]: GlUniformData} = {};\n\n    const totalUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n    for (let i = 0; i < totalUniforms; i++)\n    {\n        const uniformData = gl.getActiveUniform(program, i);\n        const name = uniformData.name.replace(/\\[.*?\\]$/, '');\n\n        const isArray = !!(uniformData.name.match(/\\[.*?\\]$/));\n\n        const type = mapType(gl, uniformData.type);\n\n        uniforms[name] = {\n            name,\n            index: i,\n            type,\n            size: uniformData.size,\n            isArray,\n            value: defaultValue(type, uniformData.size),\n        };\n    }\n\n    return uniforms;\n}\n","import { DOMAdapter } from '../../../../../environment/adapter';\n\nimport type { GlRenderingContext } from '../../context/GlRenderingContext';\nimport type { WebGLExtensions } from '../../context/WebGLExtensions';\n\n/**\n * Returns a lookup table that maps each type-format pair to a compatible internal format.\n * @function mapTypeAndFormatToInternalFormat\n * @private\n * @param gl - The rendering context.\n * @param extensions - The WebGL extensions.\n * @returns Lookup table.\n */\nexport function mapFormatToGlInternalFormat(\n    gl: GlRenderingContext,\n    extensions: WebGLExtensions,\n): Record<string, number>\n{\n    let srgb = {};\n    let bgra8unorm: number = gl.RGBA;\n\n    if (!(gl instanceof DOMAdapter.get().getWebGLRenderingContext()))\n    {\n        srgb = {\n            'rgba8unorm-srgb': gl.SRGB8_ALPHA8,\n            'bgra8unorm-srgb': gl.SRGB8_ALPHA8,\n        };\n\n        bgra8unorm = gl.RGBA8;\n    }\n    else if (extensions.srgb)\n    {\n        srgb = {\n            'rgba8unorm-srgb': extensions.srgb.SRGB8_ALPHA8_EXT,\n            'bgra8unorm-srgb': extensions.srgb.SRGB8_ALPHA8_EXT,\n        };\n    }\n\n    return {\n        // 8-bit formats\n        r8unorm: gl.R8,\n        r8snorm: gl.R8_SNORM,\n        r8uint: gl.R8UI,\n        r8sint: gl.R8I,\n\n        // 16-bit formats\n        r16uint: gl.R16UI,\n        r16sint: gl.R16I,\n        r16float: gl.R16F,\n        rg8unorm: gl.RG8,\n        rg8snorm: gl.RG8_SNORM,\n        rg8uint: gl.RG8UI,\n        rg8sint: gl.RG8I,\n\n        // 32-bit formats\n        r32uint: gl.R32UI,\n        r32sint: gl.R32I,\n        r32float: gl.R32F,\n        rg16uint: gl.RG16UI,\n        rg16sint: gl.RG16I,\n        rg16float: gl.RG16F,\n        rgba8unorm: gl.RGBA,\n\n        ...srgb,\n\n        // Packed 32-bit formats\n        rgba8snorm: gl.RGBA8_SNORM,\n        rgba8uint: gl.RGBA8UI,\n        rgba8sint: gl.RGBA8I,\n        bgra8unorm,\n        rgb9e5ufloat: gl.RGB9_E5,\n        rgb10a2unorm: gl.RGB10_A2,\n        rg11b10ufloat: gl.R11F_G11F_B10F,\n\n        // 64-bit formats\n        rg32uint: gl.RG32UI,\n        rg32sint: gl.RG32I,\n        rg32float: gl.RG32F,\n        rgba16uint: gl.RGBA16UI,\n        rgba16sint: gl.RGBA16I,\n        rgba16float: gl.RGBA16F,\n\n        // 128-bit formats\n        rgba32uint: gl.RGBA32UI,\n        rgba32sint: gl.RGBA32I,\n        rgba32float: gl.RGBA32F,\n\n        // Depth/stencil formats\n        stencil8: gl.STENCIL_INDEX8,\n        depth16unorm: gl.DEPTH_COMPONENT16,\n        depth24plus: gl.DEPTH_COMPONENT24,\n        'depth24plus-stencil8': gl.DEPTH24_STENCIL8,\n        depth32float: gl.DEPTH_COMPONENT32F,\n        'depth32float-stencil8': gl.DEPTH32F_STENCIL8,\n\n        // Compressed formats\n        ...extensions.s3tc ? {\n            'bc1-rgba-unorm': extensions.s3tc.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n            'bc2-rgba-unorm': extensions.s3tc.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n            'bc3-rgba-unorm': extensions.s3tc.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n        } : {},\n        ...extensions.s3tc_sRGB ? {\n            'bc1-rgba-unorm-srgb': extensions.s3tc_sRGB.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT,\n            'bc2-rgba-unorm-srgb': extensions.s3tc_sRGB.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT,\n            'bc3-rgba-unorm-srgb': extensions.s3tc_sRGB.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT,\n        } : {},\n        ...extensions.rgtc ? {\n            'bc4-r-unorm': extensions.rgtc.COMPRESSED_RED_RGTC1_EXT,\n            'bc4-r-snorm': extensions.rgtc.COMPRESSED_SIGNED_RED_RGTC1_EXT,\n            'bc5-rg-unorm': extensions.rgtc.COMPRESSED_RED_GREEN_RGTC2_EXT,\n            'bc5-rg-snorm': extensions.rgtc.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT,\n        } : {},\n        ...extensions.bptc ? {\n            'bc6h-rgb-float': extensions.bptc.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT,\n            'bc6h-rgb-ufloat': extensions.bptc.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT,\n            'bc7-rgba-unorm': extensions.bptc.COMPRESSED_RGBA_BPTC_UNORM_EXT,\n            'bc7-rgba-unorm-srgb': extensions.bptc.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT,\n        } : {},\n        ...extensions.etc ? {\n            'etc2-rgb8unorm': extensions.etc.COMPRESSED_RGB8_ETC2,\n            'etc2-rgb8unorm-srgb': extensions.etc.COMPRESSED_SRGB8_ETC2,\n            'etc2-rgb8a1unorm': extensions.etc.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2,\n            'etc2-rgb8a1unorm-srgb': extensions.etc.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2,\n            'etc2-rgba8unorm': extensions.etc.COMPRESSED_RGBA8_ETC2_EAC,\n            'etc2-rgba8unorm-srgb': extensions.etc.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC,\n            'eac-r11unorm': extensions.etc.COMPRESSED_R11_EAC,\n            // 'eac-r11snorm'\n            'eac-rg11unorm': extensions.etc.COMPRESSED_SIGNED_RG11_EAC,\n            // 'eac-rg11snorm'\n        } : {},\n        ...extensions.astc ? {\n            'astc-4x4-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_4x4_KHR,\n            'astc-4x4-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR,\n            'astc-5x4-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_5x4_KHR,\n            'astc-5x4-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR,\n            'astc-5x5-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_5x5_KHR,\n            'astc-5x5-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR,\n            'astc-6x5-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_6x5_KHR,\n            'astc-6x5-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR,\n            'astc-6x6-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_6x6_KHR,\n            'astc-6x6-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR,\n            'astc-8x5-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_8x5_KHR,\n            'astc-8x5-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR,\n            'astc-8x6-unorm':   extensions.astc.COMPRESSED_RGBA_ASTC_8x6_KHR,\n            'astc-8x6-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR,\n            'astc-8x8-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_8x8_KHR,\n            'astc-8x8-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR,\n            'astc-10x5-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_10x5_KHR,\n            'astc-10x5-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR,\n            'astc-10x6-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_10x6_KHR,\n            'astc-10x6-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR,\n            'astc-10x8-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_10x8_KHR,\n            'astc-10x8-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR,\n            'astc-10x10-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_10x10_KHR,\n            'astc-10x10-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR,\n            'astc-12x10-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_12x10_KHR,\n            'astc-12x10-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR,\n            'astc-12x12-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_12x12_KHR,\n            'astc-12x12-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR,\n        } : {},\n    };\n}\n","import { MAX_TEXTURES } from '../../../batcher/shared/const';\nimport { UniformGroup } from '../../shared/shader/UniformGroup';\n\nconst sampleValues = new Int32Array(MAX_TEXTURES);\n\nfor (let i = 0; i < MAX_TEXTURES; i++)\n{\n    sampleValues[i] = i;\n}\n\nexport const batchSamplersUniformGroup = new UniformGroup({\n    uTextures: { value: sampleValues, type: `i32`, size: MAX_TEXTURES }\n}, { isStatic: true });\n","/**\n * Various GL texture/resources formats.\n * @static\n * @name FORMATS\n * @enum {number}\n * @property {number} [RGBA=6408] -\n * @property {number} [RGB=6407] -\n * @property {number} [RG=33319] -\n * @property {number} [RED=6403] -\n * @property {number} [RGBA_INTEGER=36249] -\n * @property {number} [RGB_INTEGER=36248] -\n * @property {number} [RG_INTEGER=33320] -\n * @property {number} [RED_INTEGER=36244] -\n * @property {number} [ALPHA=6406] -\n * @property {number} [LUMINANCE=6409] -\n * @property {number} [LUMINANCE_ALPHA=6410] -\n * @property {number} [DEPTH_COMPONENT=6402] -\n * @property {number} [DEPTH_STENCIL=34041] -\n */\nexport enum GL_FORMATS\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    RGBA = 6408,\n    RGB = 6407,\n    RG = 33319,\n    RED = 6403,\n    RGBA_INTEGER = 36249,\n    RGB_INTEGER = 36248,\n    RG_INTEGER = 33320,\n    RED_INTEGER = 36244,\n    ALPHA = 6406,\n    LUMINANCE = 6409,\n    LUMINANCE_ALPHA = 6410,\n    DEPTH_COMPONENT = 6402,\n    DEPTH_STENCIL = 34041,\n}\n\n/**\n * Various GL target types.\n * @static\n * @name TARGETS\n * @enum {number}\n * @property {number} [TEXTURE_2D=3553] -\n * @property {number} [TEXTURE_CUBE_MAP=34067] -\n * @property {number} [TEXTURE_2D_ARRAY=35866] -\n * @property {number} [TEXTURE_CUBE_MAP_POSITIVE_X=34069] -\n * @property {number} [TEXTURE_CUBE_MAP_NEGATIVE_X=34070] -\n * @property {number} [TEXTURE_CUBE_MAP_POSITIVE_Y=34071] -\n * @property {number} [TEXTURE_CUBE_MAP_NEGATIVE_Y=34072] -\n * @property {number} [TEXTURE_CUBE_MAP_POSITIVE_Z=34073] -\n * @property {number} [TEXTURE_CUBE_MAP_NEGATIVE_Z=34074] -\n */\nexport enum GL_TARGETS\n    // eslint-disable-next-line @typescript-eslint/indent\n {\n    TEXTURE_2D = 3553,\n    TEXTURE_CUBE_MAP = 34067,\n    TEXTURE_2D_ARRAY = 35866,\n    TEXTURE_CUBE_MAP_POSITIVE_X = 34069,\n    TEXTURE_CUBE_MAP_NEGATIVE_X = 34070,\n    TEXTURE_CUBE_MAP_POSITIVE_Y = 34071,\n    TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072,\n    TEXTURE_CUBE_MAP_POSITIVE_Z = 34073,\n    TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074,\n}\n\n/**\n * The wrap modes that are supported by pixi.\n *\n * The {@link settings.WRAP_MODE} wrap mode affects the default wrapping mode of future operations.\n * It can be re-assigned to either CLAMP or REPEAT, depending upon suitability.\n * If the texture is non power of two then clamp will be used regardless as WebGL can\n * only use REPEAT if the texture is po2.\n *\n * This property only affects WebGL.\n * @name WRAP_MODES\n * @static\n * @enum {number}\n * @property {number} CLAMP - The textures uvs are clamped\n * @property {number} REPEAT - The texture uvs tile and repeat\n * @property {number} MIRRORED_REPEAT - The texture uvs tile and repeat with mirroring\n */\nexport enum GL_WRAP_MODES\n    // eslint-disable-next-line @typescript-eslint/indent\n {\n    CLAMP = 33071,\n    REPEAT = 10497,\n    MIRRORED_REPEAT = 33648,\n}\n\nexport enum GL_TYPES\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    /**\n     * 8 bits per channel for gl.RGBA\n     * @default 5121\n     */\n    UNSIGNED_BYTE = 5121,\n    /**\n     * @default 5123\n     */\n    UNSIGNED_SHORT = 5123,\n    /**\n     * 5 red bits, 6 green bits, 5 blue bits.\n     * @default 33635\n     */\n    UNSIGNED_SHORT_5_6_5 = 33635,\n    /**\n     * 4 red bits, 4 green bits, 4 blue bits, 4 alpha bits.\n     * @default 32819\n     */\n    UNSIGNED_SHORT_4_4_4_4 = 32819,\n    /**\n     * 5 red bits, 5 green bits, 5 blue bits, 1 alpha bit.\n     * @default 32820\n     */\n    UNSIGNED_SHORT_5_5_5_1 = 32820,\n    /**\n     * @default 5125\n     */\n    UNSIGNED_INT = 5125,\n    /**\n     * @default 35899\n     */\n    UNSIGNED_INT_10F_11F_11F_REV = 35899,\n    /**\n     * @default 33640\n     */\n    UNSIGNED_INT_2_10_10_10_REV = 33640,\n    /**\n     * @default 34042\n     */\n    UNSIGNED_INT_24_8 = 34042,\n    /**\n     * @default 35902\n     */\n    UNSIGNED_INT_5_9_9_9_REV = 35902,\n    /**\n     * @default 5120\n     */\n    BYTE = 5120,\n    /**\n     * @default 5122\n     */\n    SHORT = 5122,\n    /**\n     * @default 5124\n     */\n    INT = 5124,\n    /**\n     * @default 5126\n     */\n    FLOAT = 5126,\n    /**\n     * @default 36269\n     */\n    FLOAT_32_UNSIGNED_INT_24_8_REV = 36269,\n    /**\n     * @default 36193\n     */\n    HALF_FLOAT = 36193,\n}\n\n","import { DOMAdapter } from '../../../../environment/adapter';\nimport { ExtensionType } from '../../../../extensions/Extensions';\nimport { warn } from '../../../../utils/logging/warn';\nimport { type GpuPowerPreference } from '../../types';\n\nimport type { System } from '../../shared/system/System';\nimport type { WebGLRenderer } from '../WebGLRenderer';\nimport type { WebGLExtensions } from './WebGLExtensions';\n\n/**\n * Options for the context system.\n * @memberof rendering\n * @property {WebGL2RenderingContext | null} [context=null] - User-provided WebGL rendering context object.\n * @property {GpuPowerPreference} [powerPreference='default'] - An optional hint indicating what configuration\n * of GPU is suitable for the WebGL context, can be `'high-performance'` or `'low-power'`. Setting to `'high-performance'`\n * will prioritize rendering performance over power consumption, while setting to `'low-power'` will prioritize power saving\n * over rendering performance.\n * @property {boolean} [premultipliedAlpha=true] - Whether the compositor will assume the drawing buffer contains\n * colors with premultiplied alpha.\n * @property {boolean} [preserveDrawingBuffer=false] - Whether to enable drawing buffer preservation.\n * If enabled, the drawing buffer will preserve\n * its value until cleared or overwritten. Enable this if you need to call `toDataUrl` on the WebGL context.\n * @property {boolean} [antialias] - Whether to enable antialiasing.\n * @property {1 | 2} [preferWebGLVersion=2] - The preferred WebGL version to use.\n */\nexport interface ContextSystemOptions\n{\n    /**\n     * User-provided WebGL rendering context object.\n     * @default null\n     * @memberof rendering.SharedRendererOptions\n     */\n    context: WebGL2RenderingContext | null;\n    /**\n     * An optional hint indicating what configuration of GPU is suitable for the WebGL context,\n     * can be `'high-performance'` or `'low-power'`.\n     * Setting to `'high-performance'` will prioritize rendering performance over power consumption,\n     * while setting to `'low-power'` will prioritize power saving over rendering performance.\n     * @memberof rendering.SharedRendererOptions\n     * @default undefined\n     */\n    powerPreference?: GpuPowerPreference;\n\n    /**\n     * Whether the compositor will assume the drawing buffer contains colors with premultiplied alpha.\n     * @default true\n     * @memberof rendering.SharedRendererOptions\n     */\n    premultipliedAlpha: boolean;\n    /**\n     * Whether to enable drawing buffer preservation. If enabled, the drawing buffer will preserve\n     * its value until cleared or overwritten. Enable this if you need to call `toDataUrl` on the WebGL context.\n     * @default false\n     * @memberof rendering.SharedRendererOptions\n     */\n    preserveDrawingBuffer: boolean;\n\n    antialias?: boolean;\n\n    /**\n     * The preferred WebGL version to use.\n     * @default 2\n     * @memberof rendering.SharedRendererOptions\n     */\n    preferWebGLVersion?: 1 | 2;\n}\n\n/**\n * System plugin to the renderer to manage the context\n * @memberof rendering\n */\nexport class GlContextSystem implements System<ContextSystemOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'context',\n    } as const;\n\n    /** The default options for the system. */\n    public static defaultOptions: ContextSystemOptions = {\n        /**\n         * {@link WebGLOptions.context}\n         * @default null\n         */\n        context: null,\n        /**\n         * {@link WebGLOptions.premultipliedAlpha}\n         * @default true\n         */\n        premultipliedAlpha: true,\n        /**\n         * {@link WebGLOptions.preserveDrawingBuffer}\n         * @default false\n         */\n        preserveDrawingBuffer: false,\n        /**\n         * {@link WebGLOptions.powerPreference}\n         * @default default\n         */\n        powerPreference: undefined,\n        /**\n         * {@link WebGLOptions.webGLVersion}\n         * @default 2\n         */\n        preferWebGLVersion: 2,\n    };\n\n    protected CONTEXT_UID: number;\n    protected gl: WebGL2RenderingContext;\n\n    /**\n     * Features supported by current renderer.\n     * @type {object}\n     * @readonly\n     */\n    public supports = {\n        /** Support for 32-bit indices buffer. */\n        uint32Indices: true,\n        /** Support for UniformBufferObjects */\n        uniformBufferObject: true,\n        /** Support for VertexArrayObjects */\n        vertexArrayObject: true,\n        /** Support for SRGB texture format */\n        srgbTextures: true,\n        /** Support for wrapping modes if a texture is non-power of two */\n        nonPowOf2wrapping: true,\n        /** Support for MSAA (antialiasing of dynamic textures) */\n        msaa: true,\n        /** Support for mipmaps if a texture is non-power of two */\n        nonPowOf2mipmaps: true,\n    };\n\n    /**\n     * Extensions available.\n     * @type {object}\n     * @readonly\n     * @property {WEBGL_draw_buffers} drawBuffers - WebGL v1 extension\n     * @property {WEBGL_depth_texture} depthTexture - WebGL v1 extension\n     * @property {OES_texture_float} floatTexture - WebGL v1 extension\n     * @property {WEBGL_lose_context} loseContext - WebGL v1 extension\n     * @property {OES_vertex_array_object} vertexArrayObject - WebGL v1 extension\n     * @property {EXT_texture_filter_anisotropic} anisotropicFiltering - WebGL v1 and v2 extension\n     */\n    public extensions: WebGLExtensions;\n\n    public webGLVersion: 1 | 2;\n\n    private _renderer: WebGLRenderer;\n    private _contextLossForced: boolean;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n\n        this.extensions = Object.create(null);\n\n        // Bind functions\n        this.handleContextLost = this.handleContextLost.bind(this);\n        this.handleContextRestored = this.handleContextRestored.bind(this);\n    }\n\n    /**\n     * `true` if the context is lost\n     * @readonly\n     */\n    get isLost(): boolean\n    {\n        return (!this.gl || this.gl.isContextLost());\n    }\n\n    /**\n     * Handles the context change event.\n     * @param {WebGLRenderingContext} gl - New WebGL context.\n     */\n    protected contextChange(gl: WebGL2RenderingContext): void\n    {\n        this.gl = gl;\n        this._renderer.gl = gl;\n    }\n\n    public init(options: ContextSystemOptions): void\n    {\n        options = { ...GlContextSystem.defaultOptions, ...options };\n\n        /*\n         * The options passed in to create a new WebGL context.\n         */\n        if (options.context)\n        {\n            this.initFromContext(options.context);\n        }\n        else\n        {\n            const alpha = this._renderer.background.alpha < 1;\n            const premultipliedAlpha = options.premultipliedAlpha ?? true;\n            const antialias = options.antialias && !this._renderer.backBuffer.useBackBuffer;\n\n            this.createContext(options.preferWebGLVersion, {\n                alpha,\n                premultipliedAlpha,\n                antialias,\n                stencil: true,\n                preserveDrawingBuffer: options.preserveDrawingBuffer,\n                powerPreference: options.powerPreference ?? 'default',\n            });\n        }\n    }\n\n    /**\n     * Initializes the context.\n     * @protected\n     * @param {WebGLRenderingContext} gl - WebGL context\n     */\n    protected initFromContext(gl: WebGL2RenderingContext): void\n    {\n        this.gl = gl;\n\n        this.webGLVersion = gl instanceof DOMAdapter.get().getWebGLRenderingContext() ? 1 : 2;\n\n        this.getExtensions();\n\n        this.validateContext(gl);\n\n        this._renderer.runners.contextChange.emit(gl);\n\n        const element = this._renderer.view.canvas;\n\n        (element as any).addEventListener('webglcontextlost', this.handleContextLost, false);\n        element.addEventListener('webglcontextrestored', this.handleContextRestored, false);\n    }\n\n    /**\n     * Initialize from context options\n     * @protected\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext\n     * @param preferWebGLVersion\n     * @param {object} options - context attributes\n     */\n    protected createContext(preferWebGLVersion: 1 | 2, options: WebGLContextAttributes): void\n    {\n        let gl: WebGL2RenderingContext | WebGLRenderingContext;\n        const canvas = this._renderer.view.canvas;\n\n        if (preferWebGLVersion === 2)\n        {\n            gl = canvas.getContext('webgl2', options);\n        }\n\n        if (!gl)\n        {\n            gl = canvas.getContext('webgl', options);\n\n            if (!gl)\n            {\n                // fail, not able to get a context\n                throw new Error('This browser does not support WebGL. Try using the canvas renderer');\n            }\n        }\n\n        this.gl = gl as WebGL2RenderingContext;\n\n        this.initFromContext(this.gl);\n    }\n\n    /** Auto-populate the {@link GlContextSystem.extensions extensions}. */\n    protected getExtensions(): void\n    {\n        // time to set up default extensions that Pixi uses.\n        const { gl } = this;\n\n        const common = {\n            anisotropicFiltering: gl.getExtension('EXT_texture_filter_anisotropic'),\n            floatTextureLinear: gl.getExtension('OES_texture_float_linear'),\n\n            s3tc: gl.getExtension('WEBGL_compressed_texture_s3tc'),\n            s3tc_sRGB: gl.getExtension('WEBGL_compressed_texture_s3tc_srgb'), // eslint-disable-line camelcase\n            etc: gl.getExtension('WEBGL_compressed_texture_etc'),\n            etc1: gl.getExtension('WEBGL_compressed_texture_etc1'),\n            pvrtc: gl.getExtension('WEBGL_compressed_texture_pvrtc')\n                || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc'),\n            atc: gl.getExtension('WEBGL_compressed_texture_atc'),\n            astc: gl.getExtension('WEBGL_compressed_texture_astc'),\n            bptc: gl.getExtension('EXT_texture_compression_bptc'),\n            rgtc: gl.getExtension('EXT_texture_compression_rgtc'),\n            loseContext: gl.getExtension('WEBGL_lose_context'),\n        };\n\n        if (this.webGLVersion === 1)\n        {\n            this.extensions = {\n                ...common,\n\n                drawBuffers: gl.getExtension('WEBGL_draw_buffers'),\n                depthTexture: gl.getExtension('WEBGL_depth_texture'),\n                vertexArrayObject: gl.getExtension('OES_vertex_array_object')\n                    || gl.getExtension('MOZ_OES_vertex_array_object')\n                    || gl.getExtension('WEBKIT_OES_vertex_array_object'),\n                uint32ElementIndex: gl.getExtension('OES_element_index_uint'),\n                // Floats and half-floats\n                floatTexture: gl.getExtension('OES_texture_float'),\n                floatTextureLinear: gl.getExtension('OES_texture_float_linear'),\n                textureHalfFloat: gl.getExtension('OES_texture_half_float'),\n                textureHalfFloatLinear: gl.getExtension('OES_texture_half_float_linear'),\n                vertexAttribDivisorANGLE: gl.getExtension('ANGLE_instanced_arrays'),\n                srgb: gl.getExtension('EXT_sRGB'),\n            };\n        }\n        else\n        {\n            this.extensions = {\n                ...common,\n                colorBufferFloat: gl.getExtension('EXT_color_buffer_float'),\n            };\n\n            const provokeExt = gl.getExtension('WEBGL_provoking_vertex');\n\n            if (provokeExt)\n            {\n                provokeExt.provokingVertexWEBGL(provokeExt.FIRST_VERTEX_CONVENTION_WEBGL);\n            }\n        }\n    }\n\n    /**\n     * Handles a lost webgl context\n     * @param {WebGLContextEvent} event - The context lost event.\n     */\n    protected handleContextLost(event: WebGLContextEvent): void\n    {\n        event.preventDefault();\n\n        // only restore if we purposefully nuked it\n        if (this._contextLossForced)\n        {\n            this._contextLossForced = false;\n            // Restore the context after this event has exited\n            setTimeout(() =>\n            {\n                if (this.gl.isContextLost())\n                {\n                    this.extensions.loseContext?.restoreContext();\n                }\n            }, 0);\n        }\n    }\n\n    /** Handles a restored webgl context. */\n    protected handleContextRestored(): void\n    {\n        this._renderer.runners.contextChange.emit(this.gl);\n    }\n\n    public destroy(): void\n    {\n        const element = this._renderer.view.canvas;\n\n        this._renderer = null;\n\n        // remove listeners\n        (element as any).removeEventListener('webglcontextlost', this.handleContextLost);\n        element.removeEventListener('webglcontextrestored', this.handleContextRestored);\n\n        this.gl.useProgram(null);\n\n        this.extensions.loseContext?.loseContext();\n    }\n\n    /**\n     * this function can be called to force a webGL context loss\n     * this will release all resources on the GPU.\n     * Useful if you need to put Pixi to sleep, and save some GPU memory\n     *\n     * As soon as render is called - all resources will be created again.\n     */\n    public forceContextLoss(): void\n    {\n        this.extensions.loseContext?.loseContext();\n        this._contextLossForced = true;\n    }\n    /**\n     * Validate context.\n     * @param {WebGLRenderingContext} gl - Render context.\n     */\n    protected validateContext(gl: WebGL2RenderingContext): void\n    {\n        const attributes = gl.getContextAttributes();\n\n        // this is going to be fairly simple for now.. but at least we have room to grow!\n        if (attributes && !attributes.stencil)\n        {\n            // #if _DEBUG\n            /* eslint-disable max-len, no-console */\n            warn('Provided WebGL context does not have a stencil buffer, masks may not render correctly');\n            /* eslint-enable max-len, no-console */\n            // #endif\n        }\n\n        // support\n        const supports = this.supports;\n\n        const isWebGl2 = this.webGLVersion === 2;\n        const extensions = this.extensions;\n\n        supports.uint32Indices = isWebGl2 || !!extensions.uint32ElementIndex;\n        supports.uniformBufferObject = isWebGl2;\n        supports.vertexArrayObject = isWebGl2 || !!extensions.vertexArrayObject;\n        supports.srgbTextures = isWebGl2 || !!extensions.srgb;\n        supports.nonPowOf2wrapping = isWebGl2;\n        supports.nonPowOf2mipmaps = isWebGl2;\n        supports.msaa = isWebGl2;\n\n        if (!supports.uint32Indices)\n        {\n            // #if _DEBUG\n            /* eslint-disable max-len, no-console */\n            warn('Provided WebGL context does not support 32 index buffer, large scenes may not render correctly');\n            /* eslint-enable max-len, no-console */\n            // #endif\n        }\n    }\n}\n"],"sourceRoot":""}